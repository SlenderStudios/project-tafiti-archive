//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1378
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WLQuickApps.SocialNetwork.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("StatisticsDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class StatisticsDataSet : global::System.Data.DataSet {
        
        private StatisticsDataTable tableStatistics;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StatisticsDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected StatisticsDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Statistics"] != null)) {
                    base.Tables.Add(new StatisticsDataTable(ds.Tables["Statistics"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StatisticsDataTable Statistics {
            get {
                return this.tableStatistics;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            StatisticsDataSet cln = ((StatisticsDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Statistics"] != null)) {
                    base.Tables.Add(new StatisticsDataTable(ds.Tables["Statistics"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStatistics = ((StatisticsDataTable)(base.Tables["Statistics"]));
            if ((initTable == true)) {
                if ((this.tableStatistics != null)) {
                    this.tableStatistics.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "StatisticsDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/StatisticsDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStatistics = new StatisticsDataTable();
            base.Tables.Add(this.tableStatistics);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStatistics() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            StatisticsDataSet ds = new StatisticsDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void StatisticsRowChangeEventHandler(object sender, StatisticsRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StatisticsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnAlbumCount;
            
            private global::System.Data.DataColumn columnActiveUserCount;
            
            private global::System.Data.DataColumn columnAudioCount;
            
            private global::System.Data.DataColumn columnCollectionCount;
            
            private global::System.Data.DataColumn columnFriendConfirmedCount;
            
            private global::System.Data.DataColumn columnFriendRequestCount;
            
            private global::System.Data.DataColumn columnPictureCount;
            
            private global::System.Data.DataColumn columnUserCount;
            
            private global::System.Data.DataColumn columnVideoCount;
            
            private global::System.Data.DataColumn columnFileCount;
            
            private global::System.Data.DataColumn columnEventCount;
            
            private global::System.Data.DataColumn columnGroupCount;
            
            private global::System.Data.DataColumn columnCommentCount;
            
            private global::System.Data.DataColumn columnTagCount;
            
            private global::System.Data.DataColumn columnRatingCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsDataTable() {
                this.TableName = "Statistics";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatisticsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StatisticsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AlbumCountColumn {
                get {
                    return this.columnAlbumCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActiveUserCountColumn {
                get {
                    return this.columnActiveUserCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AudioCountColumn {
                get {
                    return this.columnAudioCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CollectionCountColumn {
                get {
                    return this.columnCollectionCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FriendConfirmedCountColumn {
                get {
                    return this.columnFriendConfirmedCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FriendRequestCountColumn {
                get {
                    return this.columnFriendRequestCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PictureCountColumn {
                get {
                    return this.columnPictureCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserCountColumn {
                get {
                    return this.columnUserCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VideoCountColumn {
                get {
                    return this.columnVideoCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FileCountColumn {
                get {
                    return this.columnFileCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventCountColumn {
                get {
                    return this.columnEventCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GroupCountColumn {
                get {
                    return this.columnGroupCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentCountColumn {
                get {
                    return this.columnCommentCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TagCountColumn {
                get {
                    return this.columnTagCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RatingCountColumn {
                get {
                    return this.columnRatingCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsRow this[int index] {
                get {
                    return ((StatisticsRow)(this.Rows[index]));
                }
            }
            
            public event StatisticsRowChangeEventHandler StatisticsRowChanging;
            
            public event StatisticsRowChangeEventHandler StatisticsRowChanged;
            
            public event StatisticsRowChangeEventHandler StatisticsRowDeleting;
            
            public event StatisticsRowChangeEventHandler StatisticsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStatisticsRow(StatisticsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsRow AddStatisticsRow(int AlbumCount, int ActiveUserCount, int AudioCount, int CollectionCount, int FriendConfirmedCount, int FriendRequestCount, int PictureCount, int UserCount, int VideoCount, int FileCount, int EventCount, int GroupCount, int CommentCount, int TagCount, int RatingCount) {
                StatisticsRow rowStatisticsRow = ((StatisticsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        AlbumCount,
                        ActiveUserCount,
                        AudioCount,
                        CollectionCount,
                        FriendConfirmedCount,
                        FriendRequestCount,
                        PictureCount,
                        UserCount,
                        VideoCount,
                        FileCount,
                        EventCount,
                        GroupCount,
                        CommentCount,
                        TagCount,
                        RatingCount};
                rowStatisticsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStatisticsRow);
                return rowStatisticsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StatisticsDataTable cln = ((StatisticsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StatisticsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAlbumCount = base.Columns["AlbumCount"];
                this.columnActiveUserCount = base.Columns["ActiveUserCount"];
                this.columnAudioCount = base.Columns["AudioCount"];
                this.columnCollectionCount = base.Columns["CollectionCount"];
                this.columnFriendConfirmedCount = base.Columns["FriendConfirmedCount"];
                this.columnFriendRequestCount = base.Columns["FriendRequestCount"];
                this.columnPictureCount = base.Columns["PictureCount"];
                this.columnUserCount = base.Columns["UserCount"];
                this.columnVideoCount = base.Columns["VideoCount"];
                this.columnFileCount = base.Columns["FileCount"];
                this.columnEventCount = base.Columns["EventCount"];
                this.columnGroupCount = base.Columns["GroupCount"];
                this.columnCommentCount = base.Columns["CommentCount"];
                this.columnTagCount = base.Columns["TagCount"];
                this.columnRatingCount = base.Columns["RatingCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAlbumCount = new global::System.Data.DataColumn("AlbumCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAlbumCount);
                this.columnActiveUserCount = new global::System.Data.DataColumn("ActiveUserCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActiveUserCount);
                this.columnAudioCount = new global::System.Data.DataColumn("AudioCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAudioCount);
                this.columnCollectionCount = new global::System.Data.DataColumn("CollectionCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCollectionCount);
                this.columnFriendConfirmedCount = new global::System.Data.DataColumn("FriendConfirmedCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFriendConfirmedCount);
                this.columnFriendRequestCount = new global::System.Data.DataColumn("FriendRequestCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFriendRequestCount);
                this.columnPictureCount = new global::System.Data.DataColumn("PictureCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPictureCount);
                this.columnUserCount = new global::System.Data.DataColumn("UserCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserCount);
                this.columnVideoCount = new global::System.Data.DataColumn("VideoCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVideoCount);
                this.columnFileCount = new global::System.Data.DataColumn("FileCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFileCount);
                this.columnEventCount = new global::System.Data.DataColumn("EventCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventCount);
                this.columnGroupCount = new global::System.Data.DataColumn("GroupCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupCount);
                this.columnCommentCount = new global::System.Data.DataColumn("CommentCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCommentCount);
                this.columnTagCount = new global::System.Data.DataColumn("TagCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTagCount);
                this.columnRatingCount = new global::System.Data.DataColumn("RatingCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRatingCount);
                this.columnAlbumCount.ReadOnly = true;
                this.columnActiveUserCount.ReadOnly = true;
                this.columnAudioCount.ReadOnly = true;
                this.columnCollectionCount.ReadOnly = true;
                this.columnFriendConfirmedCount.ReadOnly = true;
                this.columnFriendRequestCount.ReadOnly = true;
                this.columnPictureCount.ReadOnly = true;
                this.columnUserCount.ReadOnly = true;
                this.columnVideoCount.ReadOnly = true;
                this.columnFileCount.ReadOnly = true;
                this.columnEventCount.ReadOnly = true;
                this.columnGroupCount.ReadOnly = true;
                this.columnCommentCount.ReadOnly = true;
                this.columnTagCount.ReadOnly = true;
                this.columnRatingCount.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsRow NewStatisticsRow() {
                return ((StatisticsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StatisticsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StatisticsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StatisticsRowChanged != null)) {
                    this.StatisticsRowChanged(this, new StatisticsRowChangeEvent(((StatisticsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StatisticsRowChanging != null)) {
                    this.StatisticsRowChanging(this, new StatisticsRowChangeEvent(((StatisticsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StatisticsRowDeleted != null)) {
                    this.StatisticsRowDeleted(this, new StatisticsRowChangeEvent(((StatisticsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StatisticsRowDeleting != null)) {
                    this.StatisticsRowDeleting(this, new StatisticsRowChangeEvent(((StatisticsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStatisticsRow(StatisticsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                StatisticsDataSet ds = new StatisticsDataSet();
                xs.Add(ds.GetSchemaSerializable());
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StatisticsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StatisticsRow : global::System.Data.DataRow {
            
            private StatisticsDataTable tableStatistics;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StatisticsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStatistics = ((StatisticsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AlbumCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.AlbumCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AlbumCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.AlbumCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ActiveUserCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.ActiveUserCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActiveUserCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.ActiveUserCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AudioCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.AudioCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AudioCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.AudioCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CollectionCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.CollectionCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CollectionCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.CollectionCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FriendConfirmedCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.FriendConfirmedCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FriendConfirmedCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.FriendConfirmedCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FriendRequestCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.FriendRequestCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FriendRequestCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.FriendRequestCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PictureCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.PictureCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PictureCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.PictureCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.UserCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'UserCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.UserCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VideoCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.VideoCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VideoCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.VideoCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FileCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.FileCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FileCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.FileCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.EventCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.EventCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GroupCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.GroupCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GroupCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.GroupCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CommentCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.CommentCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CommentCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.CommentCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TagCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.TagCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TagCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.TagCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RatingCount {
                get {
                    try {
                        return ((int)(this[this.tableStatistics.RatingCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RatingCount\' in table \'Statistics\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStatistics.RatingCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAlbumCountNull() {
                return this.IsNull(this.tableStatistics.AlbumCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAlbumCountNull() {
                this[this.tableStatistics.AlbumCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiveUserCountNull() {
                return this.IsNull(this.tableStatistics.ActiveUserCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActiveUserCountNull() {
                this[this.tableStatistics.ActiveUserCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAudioCountNull() {
                return this.IsNull(this.tableStatistics.AudioCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAudioCountNull() {
                this[this.tableStatistics.AudioCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCollectionCountNull() {
                return this.IsNull(this.tableStatistics.CollectionCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCollectionCountNull() {
                this[this.tableStatistics.CollectionCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFriendConfirmedCountNull() {
                return this.IsNull(this.tableStatistics.FriendConfirmedCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFriendConfirmedCountNull() {
                this[this.tableStatistics.FriendConfirmedCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFriendRequestCountNull() {
                return this.IsNull(this.tableStatistics.FriendRequestCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFriendRequestCountNull() {
                this[this.tableStatistics.FriendRequestCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPictureCountNull() {
                return this.IsNull(this.tableStatistics.PictureCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPictureCountNull() {
                this[this.tableStatistics.PictureCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUserCountNull() {
                return this.IsNull(this.tableStatistics.UserCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUserCountNull() {
                this[this.tableStatistics.UserCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVideoCountNull() {
                return this.IsNull(this.tableStatistics.VideoCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVideoCountNull() {
                this[this.tableStatistics.VideoCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFileCountNull() {
                return this.IsNull(this.tableStatistics.FileCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFileCountNull() {
                this[this.tableStatistics.FileCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventCountNull() {
                return this.IsNull(this.tableStatistics.EventCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventCountNull() {
                this[this.tableStatistics.EventCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGroupCountNull() {
                return this.IsNull(this.tableStatistics.GroupCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGroupCountNull() {
                this[this.tableStatistics.GroupCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentCountNull() {
                return this.IsNull(this.tableStatistics.CommentCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentCountNull() {
                this[this.tableStatistics.CommentCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTagCountNull() {
                return this.IsNull(this.tableStatistics.TagCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTagCountNull() {
                this[this.tableStatistics.TagCountColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRatingCountNull() {
                return this.IsNull(this.tableStatistics.RatingCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRatingCountNull() {
                this[this.tableStatistics.RatingCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StatisticsRowChangeEvent : global::System.EventArgs {
            
            private StatisticsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsRowChangeEvent(StatisticsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StatisticsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace WLQuickApps.SocialNetwork.Data.StatisticsDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class StatisticsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StatisticsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Statistics";
            tableMapping.ColumnMappings.Add("AlbumCount", "AlbumCount");
            tableMapping.ColumnMappings.Add("ActiveUserCount", "ActiveUserCount");
            tableMapping.ColumnMappings.Add("AudioCount", "AudioCount");
            tableMapping.ColumnMappings.Add("CollectionCount", "CollectionCount");
            tableMapping.ColumnMappings.Add("FriendConfirmedCount", "FriendConfirmedCount");
            tableMapping.ColumnMappings.Add("FriendRequestCount", "FriendRequestCount");
            tableMapping.ColumnMappings.Add("PictureCount", "PictureCount");
            tableMapping.ColumnMappings.Add("UserCount", "UserCount");
            tableMapping.ColumnMappings.Add("VideoCount", "VideoCount");
            tableMapping.ColumnMappings.Add("FileCount", "FileCount");
            tableMapping.ColumnMappings.Add("EventCount", "EventCount");
            tableMapping.ColumnMappings.Add("GroupCount", "GroupCount");
            tableMapping.ColumnMappings.Add("CommentCount", "CommentCount");
            tableMapping.ColumnMappings.Add("TagCount", "TagCount");
            tableMapping.ColumnMappings.Add("RatingCount", "RatingCount");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WLQuickApps.SocialNetwork.Data.Properties.Settings.Default.SocialNetworkConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT        \r\n\r\n(SELECT COUNT(*)\r\n\tFROM aspnet_Users\r\n\tWHERE (LastActivityDate " +
                ">= @startDate))\r\n\tAS ActiveUserCount,\r\n\r\n(SELECT COUNT(*)\r\n    FROM Album INNER " +
                "JOIN BaseItem ON Album.BaseItemID = BaseItem.BaseItemID\r\n\tWHERE (BaseItem.Create" +
                "Date BETWEEN @startDate AND @endDate)) \r\n\tAS AlbumCount,     \r\n\r\n(SELECT COUNT(*" +
                ")\r\n    FROM Media INNER JOIN BaseItem ON Media.BaseItemID = BaseItem.BaseItemID\r" +
                "\n\tWHERE (BaseItem.SubType = @audioSubType AND BaseItem.CreateDate BETWEEN @start" +
                "Date AND @endDate)) \r\n\tAS AudioCount,    \r\n\r\n(SELECT COUNT(*)\r\n    FROM [Collect" +
                "ion] INNER JOIN BaseItem ON [Collection].BaseItemID = BaseItem.BaseItemID\r\n\tWHER" +
                "E (BaseItem.CreateDate BETWEEN @startDate AND @endDate)) \r\n\tAS CollectionCount,\r" +
                "\n\r\n(SELECT COUNT(*)\r\n    FROM [Comment] \r\n\tWHERE ([Comment].PostDateTime BETWEEN" +
                " @startDate AND @endDate)) \r\n\tAS CommentCount,\r\n\r\n(SELECT COUNT(*) \r\n\tFROM Event" +
                " INNER JOIN BaseItem ON Event.BaseItemID = BaseItem.BaseItemID\r\n\tWHERE (BaseItem" +
                ".CreateDate BETWEEN @startDate AND @endDate)) \r\n\tAS EventCount,\r\n\r\n(SELECT COUNT" +
                "(*)\r\n    FROM Media INNER JOIN BaseItem ON Media.BaseItemID = BaseItem.BaseItemI" +
                "D\r\n\tWHERE (BaseItem.SubType = @fileSubType AND BaseItem.CreateDate BETWEEN @star" +
                "tDate AND @endDate)) \r\n\tAS FileCount,\r\n\r\n(SELECT COUNT(*) \r\n\tFROM Friend \r\n\tWHER" +
                "E (IsConfirmed = \'true\'))\r\n\tAS FriendConfirmedCount,\r\n\r\n(SELECT COUNT(*)\r\n\tFROM " +
                "Friend\r\n\tWHERE (CreateDate BETWEEN @startDate AND @endDate))\r\n\tAS FriendRequestC" +
                "ount,\r\n\r\n(SELECT COUNT(*)\r\n\tFROM [Group] INNER JOIN BaseItem ON [Group].BaseItem" +
                "ID = BaseItem.BaseItemID\r\n\tLEFT OUTER JOIN [Event] ON [Event].BaseItemID = BaseI" +
                "tem.BaseItemID\r\n\tWHERE ([Event].BaseItemID IS NULL AND  (BaseItem.CreateDate BET" +
                "WEEN @startDate AND @endDate)))\r\n\tAS GroupCount,\r\n\r\n(SELECT COUNT(*)\r\n    FROM M" +
                "edia INNER JOIN BaseItem ON Media.BaseItemID = BaseItem.BaseItemID\r\n\tWHERE (Base" +
                "Item.SubType = @pictureSubType AND BaseItem.CreateDate BETWEEN @startDate AND @e" +
                "ndDate)) \r\n\tAS PictureCount,\r\n\r\n(SELECT COUNT(*) \r\n\tFROM  UserBaseItemRating)\r\n\t" +
                "AS RatingCount,\r\n\r\n(SELECT COUNT(*) \r\n\tFROM Tag)\r\n\tAS TagCount,\r\n\r\n(SELECT COUNT" +
                "(*)\r\n    FROM [Profile] INNER JOIN BaseItem ON Profile.BaseItemID = BaseItem.Bas" +
                "eItemID\r\n\tWHERE (BaseItem.CreateDate BETWEEN @startDate AND @endDate)) \r\n\tAS Use" +
                "rCount,\r\n\r\n(SELECT COUNT(*)\r\n    FROM Media INNER JOIN BaseItem ON Media.BaseIte" +
                "mID = BaseItem.BaseItemID\r\n\tWHERE (BaseItem.SubType =@videoSubType AND BaseItem." +
                "CreateDate BETWEEN @startDate AND @endDate)) \r\n\tAS VideoCount";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@endDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@audioSubType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@fileSubType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@pictureSubType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@videoSubType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT        COUNT(*) AS Expr1\r\nFROM            BaseItem\r\nWHERE        (SubType " +
                "= @subType) AND (CreateDate BETWEEN @startDate AND @endDate)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@endDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual StatisticsDataSet.StatisticsDataTable GetStatistics(System.DateTime startDate, System.DateTime endDate, string audioSubType, string fileSubType, string pictureSubType, string videoSubType) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(startDate));
            this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(endDate));
            if ((audioSubType == null)) {
                throw new global::System.ArgumentNullException("audioSubType");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(audioSubType));
            }
            if ((fileSubType == null)) {
                throw new global::System.ArgumentNullException("fileSubType");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(fileSubType));
            }
            if ((pictureSubType == null)) {
                throw new global::System.ArgumentNullException("pictureSubType");
            }
            else {
                this.Adapter.SelectCommand.Parameters[4].Value = ((string)(pictureSubType));
            }
            if ((videoSubType == null)) {
                throw new global::System.ArgumentNullException("videoSubType");
            }
            else {
                this.Adapter.SelectCommand.Parameters[5].Value = ((string)(videoSubType));
            }
            StatisticsDataSet.StatisticsDataTable dataTable = new StatisticsDataSet.StatisticsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> GetBaseItemCountBySubTypeAndCreateDate(string subType, System.DateTime startDate, System.DateTime endDate) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((subType == null)) {
                throw new global::System.ArgumentNullException("subType");
            }
            else {
                command.Parameters[0].Value = ((string)(subType));
            }
            command.Parameters[1].Value = ((System.DateTime)(startDate));
            command.Parameters[2].Value = ((System.DateTime)(endDate));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
    }
}

#pragma warning restore 1591