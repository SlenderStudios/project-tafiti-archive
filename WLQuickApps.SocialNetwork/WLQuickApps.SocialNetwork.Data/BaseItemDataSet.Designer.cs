//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WLQuickApps.SocialNetwork.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("BaseItemDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class BaseItemDataSet : global::System.Data.DataSet {
        
        private BaseItemDataTable tableBaseItem;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BaseItemDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected BaseItemDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["BaseItem"] != null)) {
                    base.Tables.Add(new BaseItemDataTable(ds.Tables["BaseItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BaseItemDataTable BaseItem {
            get {
                return this.tableBaseItem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            BaseItemDataSet cln = ((BaseItemDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["BaseItem"] != null)) {
                    base.Tables.Add(new BaseItemDataTable(ds.Tables["BaseItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableBaseItem = ((BaseItemDataTable)(base.Tables["BaseItem"]));
            if ((initTable == true)) {
                if ((this.tableBaseItem != null)) {
                    this.tableBaseItem.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "BaseItemDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/BaseItemDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableBaseItem = new BaseItemDataTable();
            base.Tables.Add(this.tableBaseItem);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBaseItem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            BaseItemDataSet ds = new BaseItemDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void BaseItemRowChangeEventHandler(object sender, BaseItemRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BaseItemDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnBaseItemID;
            
            private global::System.Data.DataColumn columnItemType;
            
            private global::System.Data.DataColumn columnTagList;
            
            private global::System.Data.DataColumn columnLocationID;
            
            private global::System.Data.DataColumn columnTotalViews;
            
            private global::System.Data.DataColumn columnTotalRatingScore;
            
            private global::System.Data.DataColumn columnTotalRatingCount;
            
            private global::System.Data.DataColumn columnAverageRating;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnOwnerUserID;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnSubType;
            
            private global::System.Data.DataColumn columnPrivacyLevel;
            
            private global::System.Data.DataColumn columnIsApproved;
            
            private global::System.Data.DataColumn columnImageURL;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseItemDataTable() {
                this.TableName = "BaseItem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BaseItemDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseItemIDColumn {
                get {
                    return this.columnBaseItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItemTypeColumn {
                get {
                    return this.columnItemType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TagListColumn {
                get {
                    return this.columnTagList;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LocationIDColumn {
                get {
                    return this.columnLocationID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalViewsColumn {
                get {
                    return this.columnTotalViews;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalRatingScoreColumn {
                get {
                    return this.columnTotalRatingScore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalRatingCountColumn {
                get {
                    return this.columnTotalRatingCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AverageRatingColumn {
                get {
                    return this.columnAverageRating;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerUserIDColumn {
                get {
                    return this.columnOwnerUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubTypeColumn {
                get {
                    return this.columnSubType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PrivacyLevelColumn {
                get {
                    return this.columnPrivacyLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsApprovedColumn {
                get {
                    return this.columnIsApproved;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ImageURLColumn {
                get {
                    return this.columnImageURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseItemRow this[int index] {
                get {
                    return ((BaseItemRow)(this.Rows[index]));
                }
            }
            
            public event BaseItemRowChangeEventHandler BaseItemRowChanging;
            
            public event BaseItemRowChangeEventHandler BaseItemRowChanged;
            
            public event BaseItemRowChangeEventHandler BaseItemRowDeleting;
            
            public event BaseItemRowChangeEventHandler BaseItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBaseItemRow(BaseItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseItemRow AddBaseItemRow(string ItemType, string TagList, System.Guid LocationID, int TotalViews, double TotalRatingScore, int TotalRatingCount, double AverageRating, string Title, string Description, System.Guid OwnerUserID, System.DateTime CreateDate, string SubType, int PrivacyLevel, bool IsApproved, string ImageURL) {
                BaseItemRow rowBaseItemRow = ((BaseItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ItemType,
                        TagList,
                        LocationID,
                        TotalViews,
                        TotalRatingScore,
                        TotalRatingCount,
                        AverageRating,
                        Title,
                        Description,
                        OwnerUserID,
                        CreateDate,
                        SubType,
                        PrivacyLevel,
                        IsApproved,
                        ImageURL};
                rowBaseItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBaseItemRow);
                return rowBaseItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseItemRow FindByBaseItemID(int BaseItemID) {
                return ((BaseItemRow)(this.Rows.Find(new object[] {
                            BaseItemID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BaseItemDataTable cln = ((BaseItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BaseItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBaseItemID = base.Columns["BaseItemID"];
                this.columnItemType = base.Columns["ItemType"];
                this.columnTagList = base.Columns["TagList"];
                this.columnLocationID = base.Columns["LocationID"];
                this.columnTotalViews = base.Columns["TotalViews"];
                this.columnTotalRatingScore = base.Columns["TotalRatingScore"];
                this.columnTotalRatingCount = base.Columns["TotalRatingCount"];
                this.columnAverageRating = base.Columns["AverageRating"];
                this.columnTitle = base.Columns["Title"];
                this.columnDescription = base.Columns["Description"];
                this.columnOwnerUserID = base.Columns["OwnerUserID"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnSubType = base.Columns["SubType"];
                this.columnPrivacyLevel = base.Columns["PrivacyLevel"];
                this.columnIsApproved = base.Columns["IsApproved"];
                this.columnImageURL = base.Columns["ImageURL"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBaseItemID = new global::System.Data.DataColumn("BaseItemID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseItemID);
                this.columnItemType = new global::System.Data.DataColumn("ItemType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemType);
                this.columnTagList = new global::System.Data.DataColumn("TagList", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTagList);
                this.columnLocationID = new global::System.Data.DataColumn("LocationID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLocationID);
                this.columnTotalViews = new global::System.Data.DataColumn("TotalViews", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalViews);
                this.columnTotalRatingScore = new global::System.Data.DataColumn("TotalRatingScore", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalRatingScore);
                this.columnTotalRatingCount = new global::System.Data.DataColumn("TotalRatingCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalRatingCount);
                this.columnAverageRating = new global::System.Data.DataColumn("AverageRating", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAverageRating);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnOwnerUserID = new global::System.Data.DataColumn("OwnerUserID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerUserID);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnSubType = new global::System.Data.DataColumn("SubType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubType);
                this.columnPrivacyLevel = new global::System.Data.DataColumn("PrivacyLevel", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPrivacyLevel);
                this.columnIsApproved = new global::System.Data.DataColumn("IsApproved", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsApproved);
                this.columnImageURL = new global::System.Data.DataColumn("ImageURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnImageURL);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnBaseItemID}, true));
                this.columnBaseItemID.AutoIncrement = true;
                this.columnBaseItemID.AllowDBNull = false;
                this.columnBaseItemID.ReadOnly = true;
                this.columnBaseItemID.Unique = true;
                this.columnItemType.AllowDBNull = false;
                this.columnItemType.MaxLength = 50;
                this.columnTagList.AllowDBNull = false;
                this.columnTagList.MaxLength = 2147483647;
                this.columnLocationID.AllowDBNull = false;
                this.columnTotalViews.AllowDBNull = false;
                this.columnTotalRatingScore.AllowDBNull = false;
                this.columnTotalRatingCount.AllowDBNull = false;
                this.columnAverageRating.ReadOnly = true;
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.MaxLength = 255;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 1073741823;
                this.columnOwnerUserID.AllowDBNull = false;
                this.columnCreateDate.AllowDBNull = false;
                this.columnSubType.AllowDBNull = false;
                this.columnSubType.MaxLength = 50;
                this.columnPrivacyLevel.AllowDBNull = false;
                this.columnIsApproved.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseItemRow NewBaseItemRow() {
                return ((BaseItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BaseItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BaseItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BaseItemRowChanged != null)) {
                    this.BaseItemRowChanged(this, new BaseItemRowChangeEvent(((BaseItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BaseItemRowChanging != null)) {
                    this.BaseItemRowChanging(this, new BaseItemRowChangeEvent(((BaseItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BaseItemRowDeleted != null)) {
                    this.BaseItemRowDeleted(this, new BaseItemRowChangeEvent(((BaseItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BaseItemRowDeleting != null)) {
                    this.BaseItemRowDeleting(this, new BaseItemRowChangeEvent(((BaseItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBaseItemRow(BaseItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                BaseItemDataSet ds = new BaseItemDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BaseItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BaseItemRow : global::System.Data.DataRow {
            
            private BaseItemDataTable tableBaseItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BaseItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBaseItem = ((BaseItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseItemID {
                get {
                    return ((int)(this[this.tableBaseItem.BaseItemIDColumn]));
                }
                set {
                    this[this.tableBaseItem.BaseItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItemType {
                get {
                    return ((string)(this[this.tableBaseItem.ItemTypeColumn]));
                }
                set {
                    this[this.tableBaseItem.ItemTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TagList {
                get {
                    return ((string)(this[this.tableBaseItem.TagListColumn]));
                }
                set {
                    this[this.tableBaseItem.TagListColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid LocationID {
                get {
                    return ((global::System.Guid)(this[this.tableBaseItem.LocationIDColumn]));
                }
                set {
                    this[this.tableBaseItem.LocationIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalViews {
                get {
                    return ((int)(this[this.tableBaseItem.TotalViewsColumn]));
                }
                set {
                    this[this.tableBaseItem.TotalViewsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double TotalRatingScore {
                get {
                    return ((double)(this[this.tableBaseItem.TotalRatingScoreColumn]));
                }
                set {
                    this[this.tableBaseItem.TotalRatingScoreColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalRatingCount {
                get {
                    return ((int)(this[this.tableBaseItem.TotalRatingCountColumn]));
                }
                set {
                    this[this.tableBaseItem.TotalRatingCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double AverageRating {
                get {
                    try {
                        return ((double)(this[this.tableBaseItem.AverageRatingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AverageRating\' in table \'BaseItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseItem.AverageRatingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableBaseItem.TitleColumn]));
                }
                set {
                    this[this.tableBaseItem.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableBaseItem.DescriptionColumn]));
                }
                set {
                    this[this.tableBaseItem.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid OwnerUserID {
                get {
                    return ((global::System.Guid)(this[this.tableBaseItem.OwnerUserIDColumn]));
                }
                set {
                    this[this.tableBaseItem.OwnerUserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableBaseItem.CreateDateColumn]));
                }
                set {
                    this[this.tableBaseItem.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SubType {
                get {
                    return ((string)(this[this.tableBaseItem.SubTypeColumn]));
                }
                set {
                    this[this.tableBaseItem.SubTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PrivacyLevel {
                get {
                    return ((int)(this[this.tableBaseItem.PrivacyLevelColumn]));
                }
                set {
                    this[this.tableBaseItem.PrivacyLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsApproved {
                get {
                    return ((bool)(this[this.tableBaseItem.IsApprovedColumn]));
                }
                set {
                    this[this.tableBaseItem.IsApprovedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ImageURL {
                get {
                    try {
                        return ((string)(this[this.tableBaseItem.ImageURLColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ImageURL\' in table \'BaseItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableBaseItem.ImageURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAverageRatingNull() {
                return this.IsNull(this.tableBaseItem.AverageRatingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAverageRatingNull() {
                this[this.tableBaseItem.AverageRatingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsImageURLNull() {
                return this.IsNull(this.tableBaseItem.ImageURLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetImageURLNull() {
                this[this.tableBaseItem.ImageURLColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BaseItemRowChangeEvent : global::System.EventArgs {
            
            private BaseItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseItemRowChangeEvent(BaseItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BaseItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace WLQuickApps.SocialNetwork.Data.BaseItemDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class BaseItemTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public BaseItemTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "BaseItem";
            tableMapping.ColumnMappings.Add("BaseItemID", "BaseItemID");
            tableMapping.ColumnMappings.Add("ItemType", "ItemType");
            tableMapping.ColumnMappings.Add("TagList", "TagList");
            tableMapping.ColumnMappings.Add("LocationID", "LocationID");
            tableMapping.ColumnMappings.Add("TotalViews", "TotalViews");
            tableMapping.ColumnMappings.Add("TotalRatingScore", "TotalRatingScore");
            tableMapping.ColumnMappings.Add("TotalRatingCount", "TotalRatingCount");
            tableMapping.ColumnMappings.Add("AverageRating", "AverageRating");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("Description", "Description");
            tableMapping.ColumnMappings.Add("OwnerUserID", "OwnerUserID");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            tableMapping.ColumnMappings.Add("SubType", "SubType");
            tableMapping.ColumnMappings.Add("PrivacyLevel", "PrivacyLevel");
            tableMapping.ColumnMappings.Add("IsApproved", "IsApproved");
            tableMapping.ColumnMappings.Add("ImageURL", "ImageURL");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [BaseItem] WHERE (([BaseItemID] = @Original_BaseItemID) AND ([ItemType] = @Original_ItemType) AND ([LocationID] = @Original_LocationID) AND ([TotalViews] = @Original_TotalViews) AND ([TotalRatingScore] = @Original_TotalRatingScore) AND ([TotalRatingCount] = @Original_TotalRatingCount) AND ((@IsNull_AverageRating = 1 AND [AverageRating] IS NULL) OR ([AverageRating] = @Original_AverageRating)) AND ([Title] = @Original_Title) AND ([OwnerUserID] = @Original_OwnerUserID) AND ([CreateDate] = @Original_CreateDate) AND ([SubType] = @Original_SubType) AND ([PrivacyLevel] = @Original_PrivacyLevel) AND ([IsApproved] = @Original_IsApproved) AND ((@IsNull_ImageURL = 1 AND [ImageURL] IS NULL) OR ([ImageURL] = @Original_ImageURL)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BaseItemID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ItemType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ItemType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LocationID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LocationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalViews", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalViews", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalRatingScore", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingScore", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalRatingCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AverageRating", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRating", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AverageRating", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRating", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OwnerUserID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerUserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PrivacyLevel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrivacyLevel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsApproved", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsApproved", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageURL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageURL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageURL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [BaseItem] ([ItemType], [TagList], [LocationID], [TotalViews], [TotalRatingScore], [TotalRatingCount], [AverageRating], [Title], [Description], [OwnerUserID], [CreateDate], [SubType], [PrivacyLevel], [IsApproved], [ImageURL]) VALUES (@ItemType, @TagList, @LocationID, @TotalViews, @TotalRatingScore, @TotalRatingCount, @AverageRating, @Title, @Description, @OwnerUserID, @CreateDate, @SubType, @PrivacyLevel, @IsApproved, @ImageURL);
SELECT BaseItemID, ItemType, TagList, LocationID, TotalViews, TotalRatingScore, TotalRatingCount, AverageRating, Title, Description, OwnerUserID, CreateDate, SubType, PrivacyLevel, IsApproved, ImageURL FROM BaseItem WHERE (BaseItemID = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ItemType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ItemType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TagList", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TagList", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LocationID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LocationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalViews", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalViews", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalRatingScore", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingScore", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalRatingCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AverageRating", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRating", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OwnerUserID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrivacyLevel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrivacyLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsApproved", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsApproved", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [BaseItem] SET [ItemType] = @ItemType, [TagList] = @TagList, [LocationID] = @LocationID, [TotalViews] = @TotalViews, [TotalRatingScore] = @TotalRatingScore, [TotalRatingCount] = @TotalRatingCount, [AverageRating] = @AverageRating, [Title] = @Title, [Description] = @Description, [OwnerUserID] = @OwnerUserID, [CreateDate] = @CreateDate, [SubType] = @SubType, [PrivacyLevel] = @PrivacyLevel, [IsApproved] = @IsApproved, [ImageURL] = @ImageURL WHERE (([BaseItemID] = @Original_BaseItemID) AND ([ItemType] = @Original_ItemType) AND ([LocationID] = @Original_LocationID) AND ([TotalViews] = @Original_TotalViews) AND ([TotalRatingScore] = @Original_TotalRatingScore) AND ([TotalRatingCount] = @Original_TotalRatingCount) AND ((@IsNull_AverageRating = 1 AND [AverageRating] IS NULL) OR ([AverageRating] = @Original_AverageRating)) AND ([Title] = @Original_Title) AND ([OwnerUserID] = @Original_OwnerUserID) AND ([CreateDate] = @Original_CreateDate) AND ([SubType] = @Original_SubType) AND ([PrivacyLevel] = @Original_PrivacyLevel) AND ([IsApproved] = @Original_IsApproved) AND ((@IsNull_ImageURL = 1 AND [ImageURL] IS NULL) OR ([ImageURL] = @Original_ImageURL)));
SELECT BaseItemID, ItemType, TagList, LocationID, TotalViews, TotalRatingScore, TotalRatingCount, AverageRating, Title, Description, OwnerUserID, CreateDate, SubType, PrivacyLevel, IsApproved, ImageURL FROM BaseItem WHERE (BaseItemID = @BaseItemID)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ItemType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ItemType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TagList", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TagList", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LocationID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LocationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalViews", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalViews", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalRatingScore", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingScore", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalRatingCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@AverageRating", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRating", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NText, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OwnerUserID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrivacyLevel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrivacyLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsApproved", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsApproved", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BaseItemID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ItemType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ItemType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_LocationID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "LocationID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalViews", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalViews", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalRatingScore", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingScore", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TotalRatingCount", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_AverageRating", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRating", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_AverageRating", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "AverageRating", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Title", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_OwnerUserID", global::System.Data.SqlDbType.UniqueIdentifier, 0, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerUserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CreateDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_SubType", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "SubType", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PrivacyLevel", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PrivacyLevel", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_IsApproved", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "IsApproved", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ImageURL", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageURL", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ImageURL", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ImageURL", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BaseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WLQuickApps.SocialNetwork.Data.Properties.Settings.Default.SocialNetworkConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[27];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT        BaseItemID, ItemType, TagList, LocationID, TotalViews, TotalRatingScore, TotalRatingCount, AverageRating, Title, Description, OwnerUserID, CreateDate, 
                         SubType, PrivacyLevel, IsApproved, ImageURL
FROM            BaseItem";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"DELETE FROM ThumbnailCache
WHERE BaseItemID = @baseItemID AND MaximumWidth = @maximumWidth
AND MaximumHeight = @maximumHeight;

INSERT INTO ThumbnailCache (BaseItemID, Bits, MaximumWidth, MaximumHeight, LastAccessedDate)
VALUES (@baseItemID, @bits, @maximumWidth, @maximumHeight, CURRENT_TIMESTAMP);";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumWidth", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumWidth", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumHeight", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumHeight", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@bits", global::System.Data.SqlDbType.Image, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "Bits", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "UPDATE [BaseItem] SET [IsApproved] = \'True\' WHERE [BaseItemID] = @baseItemID";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "INSERT INTO BaseItemAssociation\r\n                         (AssociatedBaseItemID, " +
                "BaseItemID)\r\nVALUES        (@associatedBaseItemID,@baseItemID)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@associatedBaseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "AssociatedBaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"INSERT INTO [BaseItem] ([ItemType], [TagList], [LocationID], [TotalViews], [TotalRatingScore], [TotalRatingCount], [Title], [Description], [OwnerUserID], [CreateDate], [SubType], [PrivacyLevel], [IsApproved], [ImageURL]) VALUES (@ItemType, @TagList, @LocationID, @TotalViews, @TotalRatingScore, @TotalRatingCount, @Title, @Description, @OwnerUserID, @CreateDate, @SubType, @PrivacyLevel, @IsApproved, @ImageURL);
SELECT SCOPE_IDENTITY()";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ItemType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "ItemType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TagList", global::System.Data.SqlDbType.Text, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "TagList", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@LocationID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "LocationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalViews", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TotalViews", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalRatingScore", global::System.Data.SqlDbType.Float, 8, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingScore", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TotalRatingCount", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TotalRatingCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Title", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Description", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OwnerUserID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CreateDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "CreateDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@SubType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PrivacyLevel", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PrivacyLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsApproved", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsApproved", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ImageURL", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "ImageURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "DELETE FROM [BaseItem] WHERE OwnerUserID = @ownerUserID";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ownerUserID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerUserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "DELETE FROM [BaseItem] WHERE [BaseItemID] = @baseItemID";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = @"SELECT BaseItem.AverageRating, BaseItem.BaseItemID, BaseItem.CreateDate, BaseItem.Description, BaseItem.ImageURL, BaseItem.IsApproved, BaseItem.ItemType, BaseItem.LocationID, BaseItem.OwnerUserID, BaseItem.PrivacyLevel, BaseItem.SubType, BaseItem.TagList, BaseItem.Title, BaseItem.TotalRatingCount, BaseItem.TotalRatingScore, BaseItem.TotalViews, BaseItem.ImageURL

FROM BaseItem INNER JOIN BaseItemAssociation ON BaseItem.BaseItemID = BaseItemAssociation.AssociatedBaseItemID WHERE (BaseItemAssociation.BaseItemID = @baseItemID)";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "SELECT AverageRating, BaseItemID, CreateDate, Description, ImageURL, IsApproved, " +
                "ItemType, LocationID, OwnerUserID, PrivacyLevel, SubType, TagList, Title, TotalR" +
                "atingCount, TotalRatingScore, TotalViews FROM BaseItem WHERE (BaseItemID = @base" +
                "ItemID)";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = @"SELECT BaseItem.AverageRating, BaseItem.BaseItemID, BaseItem.CreateDate, BaseItem.Description, BaseItem.ImageURL, BaseItem.IsApproved, BaseItem.ItemType, BaseItem.LocationID, BaseItem.OwnerUserID, BaseItem.PrivacyLevel, BaseItem.SubType, BaseItem.TagList, BaseItem.Title, BaseItem.TotalRatingCount, BaseItem.TotalRatingScore, BaseItem.TotalViews FROM BaseItem INNER JOIN BaseItemAssociation ON BaseItem.BaseItemID = BaseItemAssociation.BaseItemID WHERE (BaseItemAssociation.AssociatedBaseItemID = @associatedBaseItemID)";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@associatedBaseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "AssociatedBaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = "SELECT AverageRating, BaseItemID, CreateDate, Description, IsApproved, ItemType, " +
                "LocationID, OwnerUserID, PrivacyLevel, SubType, TagList, Title, TotalRatingCount" +
                ", TotalRatingScore, TotalViews, ImageURL FROM BaseItem WHERE (BaseItemID = @base" +
                "ItemID)";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[11].Connection = this.Connection;
            this._commandCollection[11].CommandText = "SELECT AverageRating, BaseItemID, CreateDate, Description, IsApproved, ItemType, " +
                "LocationID, OwnerUserID, PrivacyLevel, SubType, TagList, Title, TotalRatingCount" +
                ", TotalRatingScore, TotalViews, ImageURL FROM BaseItem WHERE (BaseItemID = @base" +
                "ItemID)";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[11].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[12].Connection = this.Connection;
            this._commandCollection[12].CommandText = "SELECT ThumbnailBits FROM BaseItem WHERE (BaseItemID = @baseItemID)";
            this._commandCollection[12].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[13].Connection = this.Connection;
            this._commandCollection[13].CommandText = @"UPDATE ThumbnailCache
SET LastAccessedDate = CURRENT_TIMESTAMP
WHERE BaseItemID = @baseItemID AND MaximumWidth = @maximumWidth
AND MaximumHeight = @maximumHeight;

SELECT Bits FROM ThumbnailCache
WHERE BaseItemID = @baseItemID AND MaximumWidth = @maximumWidth
AND MaximumHeight = @maximumHeight";
            this._commandCollection[13].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumWidth", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumWidth", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumHeight", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "MaximumHeight", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[14] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[14].Connection = this.Connection;
            this._commandCollection[14].CommandText = @"SELECT TOP (100) AverageRating, BaseItemID, CreateDate, Description, ImageURL, IsApproved, ItemType, LocationID, OwnerUserID, PrivacyLevel, SubType, TagList, Title, TotalRatingCount, TotalRatingScore, TotalViews , ImageURL FROM BaseItem WHERE (IsApproved = 'false') ORDER BY BaseItemID";
            this._commandCollection[14].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[15] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[15].Connection = this.Connection;
            this._commandCollection[15].CommandText = "SELECT       Count(*)\r\nFROM            BaseItem \r\nWHERE        (BaseItem.IsApprov" +
                "ed = \'false\')";
            this._commandCollection[15].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[16] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[16].Connection = this.Connection;
            this._commandCollection[16].CommandText = @"DELETE FROM UserBaseItemRating
WHERE UserID = @userID AND BaseItemID = @baseItemID;

INSERT INTO UserBaseItemRating (UserID, BaseItemID, Rating)
VALUES (@userID, @baseItemID, @rating);

UPDATE BaseItem
SET TotalRatingScore = (SELECT SUM(Rating) FROM UserBaseItemRating WHERE BaseItemID = @baseItemID),
TotalRatingCount = (SELECT COUNT(Rating) FROM UserBaseItemRating WHERE BaseItemID = @baseItemID)
WHERE BaseItemID = @baseItemID;

SELECT AverageRating
FROM BaseItem
WHERE BaseItemID = @baseItemID";
            this._commandCollection[16].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rating", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Rating", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[17] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[17].Connection = this.Connection;
            this._commandCollection[17].CommandText = "DELETE FROM BaseItemAssociation\r\nWHERE        (AssociatedBaseItemID = @associated" +
                "BaseItemID)";
            this._commandCollection[17].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[17].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@associatedBaseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "AssociatedBaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[18] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[18].Connection = this.Connection;
            this._commandCollection[18].CommandText = "DELETE FROM BaseItemAssociation\r\nWHERE        (AssociatedBaseItemID = @associated" +
                "BaseItemID) and (BaseItemID = @baseItemID)";
            this._commandCollection[18].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[18].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@associatedBaseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "AssociatedBaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[18].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[19] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[19].Connection = this.Connection;
            this._commandCollection[19].CommandText = @"SELECT TOP (100) BaseItem.AverageRating, BaseItem.BaseItemID, BaseItem.CreateDate, BaseItem.Description, BaseItem.ImageURL, BaseItem.IsApproved, BaseItem.ItemType, BaseItem.LocationID, BaseItem.OwnerUserID, BaseItem.PrivacyLevel, BaseItem.SubType, BaseItem.TagList, BaseItem.Title, BaseItem.TotalRatingCount, BaseItem.TotalRatingScore, BaseItem.TotalViews, ImageURL  FROM BaseItem INNER JOIN Location ON BaseItem.LocationID = Location.LocationID WHERE (BaseItem.TagList LIKE @tagSearchList) AND (Location.SearchData LIKE @locationSearchData) ORDER BY BaseItem.AverageRating DESC";
            this._commandCollection[19].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[19].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagSearchList", global::System.Data.SqlDbType.Text, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "TagList", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[19].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@locationSearchData", global::System.Data.SqlDbType.VarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "SearchData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[20] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[20].Connection = this.Connection;
            this._commandCollection[20].CommandText = @"WITH PageTable AS
(
SELECT BaseItem.AverageRating, BaseItem.BaseItemID, BaseItem.CreateDate, 
		BaseItem.Description, BaseItem.ItemType, BaseItem.LocationID, BaseItem.OwnerUserID, 
		BaseItem.PrivacyLevel, BaseItem.SubType, BaseItem.TagList, BaseItem.Title, BaseItem.TotalRatingCount, 
		BaseItem.TotalRatingScore, BaseItem.TotalViews, IsApproved

		, ROW_NUMBER() over (ORDER BY BaseItem.AverageRating DESC) as RowID


FROM BaseItem INNER JOIN Location ON BaseItem.LocationID = Location.LocationID 
WHERE (BaseItem.ItemType = @itemType) AND 
(BaseItem.TagList LIKE @tagSearchList) AND (Location.SearchData LIKE @locationSearchData)

)

select * from PageTable
where RowID between (@startRowIndex + 1) and (@startRowIndex + @maximumRows)";
            this._commandCollection[20].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[20].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@itemType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[20].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagSearchList", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[20].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@locationSearchData", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[20].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startRowIndex", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[20].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumRows", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[21] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[21].Connection = this.Connection;
            this._commandCollection[21].CommandText = @"WITH PageTable AS
(
SELECT BaseItem.AverageRating, BaseItem.BaseItemID, BaseItem.CreateDate, 
		BaseItem.Description, BaseItem.ItemType, BaseItem.LocationID, BaseItem.OwnerUserID, 
		BaseItem.PrivacyLevel, BaseItem.SubType, BaseItem.TagList, BaseItem.Title, BaseItem.TotalRatingCount, 
		BaseItem.TotalRatingScore, BaseItem.TotalViews, IsApproved

		, ROW_NUMBER() over (ORDER BY BaseItem.AverageRating DESC) as RowID


FROM BaseItem INNER JOIN Location ON BaseItem.LocationID = Location.LocationID 
WHERE (BaseItem.ItemType = @itemType) AND  (BaseItem.SubType = @subType) AND
(BaseItem.TagList LIKE @tagSearchList) AND (Location.SearchData LIKE @locationSearchData)

)

select * from PageTable
where RowID between (@startRowIndex + 1) and (@startRowIndex + @maximumRows)";
            this._commandCollection[21].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[21].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@itemType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "ItemType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[21].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subType", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[21].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagSearchList", global::System.Data.SqlDbType.Text, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "TagList", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[21].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@locationSearchData", global::System.Data.SqlDbType.VarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "SearchData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[21].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startRowIndex", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[21].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumRows", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[22] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[22].Connection = this.Connection;
            this._commandCollection[22].CommandText = @"SELECT COUNT(*) 

FROM BaseItem INNER JOIN Location ON BaseItem.LocationID = Location.LocationID 
WHERE (BaseItem.ItemType = @itemType) AND  (BaseItem.SubType = @subType) AND
(BaseItem.TagList LIKE @tagSearchList) AND (Location.SearchData LIKE @locationSearchData)";
            this._commandCollection[22].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[22].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@itemType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "ItemType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[22].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@subType", global::System.Data.SqlDbType.VarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "SubType", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[22].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagSearchList", global::System.Data.SqlDbType.Text, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "TagList", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[22].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@locationSearchData", global::System.Data.SqlDbType.VarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "SearchData", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[23] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[23].Connection = this.Connection;
            this._commandCollection[23].CommandText = "DELETE FROM ThumbnailCache WHERE BaseItemID = @baseItemID;\r\nUPDATE [BaseItem] SET" +
                " ThumbnailBits = @thumbnailBits where BaseItemID = @baseItemID";
            this._commandCollection[23].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[23].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[23].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@thumbnailBits", global::System.Data.SqlDbType.VarBinary, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "ThumbnailBits", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[24] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[24].Connection = this.Connection;
            this._commandCollection[24].CommandText = "UPDATE [BaseItem] SET [TotalViews] = @totalViews WHERE (BaseItemID = @baseItemID)" +
                "";
            this._commandCollection[24].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[24].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[24].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@totalViews", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "TotalViews", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[25] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[25].Connection = this.Connection;
            this._commandCollection[25].CommandText = "UPDATE       BaseItem\r\nSET                TagList = @tagList, LocationID = @locat" +
                "ionID, Title = @title, Description = @description, OwnerUserID = @ownerUserID, P" +
                "rivacyLevel =@privacyLevel, ImageURL = @imageURL\r\nWHERE        (BaseItemID = @ba" +
                "seItemID)";
            this._commandCollection[25].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[25].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagList", global::System.Data.SqlDbType.Text, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "TagList", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[25].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@locationID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "LocationID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[25].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@title", global::System.Data.SqlDbType.NVarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "Title", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[25].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@description", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "Description", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[25].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ownerUserID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerUserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[25].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@privacyLevel", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "PrivacyLevel", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[25].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@imageURL", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "ImageURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[25].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[26] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[26].Connection = this.Connection;
            this._commandCollection[26].CommandText = "SELECT COUNT(*) FROM BaseItem WHERE (BaseItemID = @baseItemID) AND ((ThumbnailBit" +
                "s IS NOT NULL ) OR (ImageURL is not NULL))";
            this._commandCollection[26].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[26].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(BaseItemDataSet.BaseItemDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual BaseItemDataSet.BaseItemDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            BaseItemDataSet.BaseItemDataTable dataTable = new BaseItemDataSet.BaseItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual BaseItemDataSet.BaseItemDataTable GetAssociatedBaseItemsByBaseItemID(int baseItemID) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(baseItemID));
            BaseItemDataSet.BaseItemDataTable dataTable = new BaseItemDataSet.BaseItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual BaseItemDataSet.BaseItemDataTable GetBaseItemByBaseItemID(int baseItemID) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(baseItemID));
            BaseItemDataSet.BaseItemDataTable dataTable = new BaseItemDataSet.BaseItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual BaseItemDataSet.BaseItemDataTable GetBaseItemsAssociatedWithBaseItem(int associatedBaseItemID) {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(associatedBaseItemID));
            BaseItemDataSet.BaseItemDataTable dataTable = new BaseItemDataSet.BaseItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual BaseItemDataSet.BaseItemDataTable GetUnapprovedBaseItems() {
            this.Adapter.SelectCommand = this.CommandCollection[14];
            BaseItemDataSet.BaseItemDataTable dataTable = new BaseItemDataSet.BaseItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual BaseItemDataSet.BaseItemDataTable SearchAll(string tagSearchList, string locationSearchData) {
            this.Adapter.SelectCommand = this.CommandCollection[19];
            if ((tagSearchList == null)) {
                throw new global::System.ArgumentNullException("tagSearchList");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tagSearchList));
            }
            if ((locationSearchData == null)) {
                throw new global::System.ArgumentNullException("locationSearchData");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(locationSearchData));
            }
            BaseItemDataSet.BaseItemDataTable dataTable = new BaseItemDataSet.BaseItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual BaseItemDataSet.BaseItemDataTable SearchByItemType(string itemType, string tagSearchList, string locationSearchData, int startRowIndex, int maximumRows) {
            this.Adapter.SelectCommand = this.CommandCollection[20];
            if ((itemType == null)) {
                throw new global::System.ArgumentNullException("itemType");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(itemType));
            }
            if ((tagSearchList == null)) {
                throw new global::System.ArgumentNullException("tagSearchList");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(tagSearchList));
            }
            if ((locationSearchData == null)) {
                throw new global::System.ArgumentNullException("locationSearchData");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(locationSearchData));
            }
            this.Adapter.SelectCommand.Parameters[3].Value = ((int)(startRowIndex));
            this.Adapter.SelectCommand.Parameters[4].Value = ((int)(maximumRows));
            BaseItemDataSet.BaseItemDataTable dataTable = new BaseItemDataSet.BaseItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual BaseItemDataSet.BaseItemDataTable SearchBySubItemType(string itemType, string subType, string tagSearchList, string locationSearchData, int startRowIndex, int maximumRows) {
            this.Adapter.SelectCommand = this.CommandCollection[21];
            if ((itemType == null)) {
                throw new global::System.ArgumentNullException("itemType");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(itemType));
            }
            if ((subType == null)) {
                throw new global::System.ArgumentNullException("subType");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(subType));
            }
            if ((tagSearchList == null)) {
                throw new global::System.ArgumentNullException("tagSearchList");
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = ((string)(tagSearchList));
            }
            if ((locationSearchData == null)) {
                throw new global::System.ArgumentNullException("locationSearchData");
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = ((string)(locationSearchData));
            }
            this.Adapter.SelectCommand.Parameters[4].Value = ((int)(startRowIndex));
            this.Adapter.SelectCommand.Parameters[5].Value = ((int)(maximumRows));
            BaseItemDataSet.BaseItemDataTable dataTable = new BaseItemDataSet.BaseItemDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BaseItemDataSet.BaseItemDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(BaseItemDataSet dataSet) {
            return this.Adapter.Update(dataSet, "BaseItem");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_BaseItemID, string Original_ItemType, System.Guid Original_LocationID, int Original_TotalViews, double Original_TotalRatingScore, int Original_TotalRatingCount, global::System.Nullable<double> Original_AverageRating, string Original_Title, System.Guid Original_OwnerUserID, System.DateTime Original_CreateDate, string Original_SubType, int Original_PrivacyLevel, bool Original_IsApproved, string Original_ImageURL) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_BaseItemID));
            if ((Original_ItemType == null)) {
                throw new global::System.ArgumentNullException("Original_ItemType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ItemType));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.Guid)(Original_LocationID));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_TotalViews));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_TotalRatingScore));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(Original_TotalRatingCount));
            if ((Original_AverageRating.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((double)(Original_AverageRating.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((Original_Title == null)) {
                throw new global::System.ArgumentNullException("Original_Title");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Title));
            }
            this.Adapter.DeleteCommand.Parameters[9].Value = ((System.Guid)(Original_OwnerUserID));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((System.DateTime)(Original_CreateDate));
            if ((Original_SubType == null)) {
                throw new global::System.ArgumentNullException("Original_SubType");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_SubType));
            }
            this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_PrivacyLevel));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((bool)(Original_IsApproved));
            if ((Original_ImageURL == null)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((string)(Original_ImageURL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ItemType, string TagList, System.Guid LocationID, int TotalViews, double TotalRatingScore, int TotalRatingCount, global::System.Nullable<double> AverageRating, string Title, string Description, System.Guid OwnerUserID, System.DateTime CreateDate, string SubType, int PrivacyLevel, bool IsApproved, string ImageURL) {
            if ((ItemType == null)) {
                throw new global::System.ArgumentNullException("ItemType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ItemType));
            }
            if ((TagList == null)) {
                throw new global::System.ArgumentNullException("TagList");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TagList));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(LocationID));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(TotalViews));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(TotalRatingScore));
            this.Adapter.InsertCommand.Parameters[5].Value = ((int)(TotalRatingCount));
            if ((AverageRating.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((double)(AverageRating.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Title == null)) {
                throw new global::System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Title));
            }
            if ((Description == null)) {
                throw new global::System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Description));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((System.Guid)(OwnerUserID));
            this.Adapter.InsertCommand.Parameters[10].Value = ((System.DateTime)(CreateDate));
            if ((SubType == null)) {
                throw new global::System.ArgumentNullException("SubType");
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = ((string)(SubType));
            }
            this.Adapter.InsertCommand.Parameters[12].Value = ((int)(PrivacyLevel));
            this.Adapter.InsertCommand.Parameters[13].Value = ((bool)(IsApproved));
            if ((ImageURL == null)) {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = ((string)(ImageURL));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ItemType, 
                    string TagList, 
                    System.Guid LocationID, 
                    int TotalViews, 
                    double TotalRatingScore, 
                    int TotalRatingCount, 
                    global::System.Nullable<double> AverageRating, 
                    string Title, 
                    string Description, 
                    System.Guid OwnerUserID, 
                    System.DateTime CreateDate, 
                    string SubType, 
                    int PrivacyLevel, 
                    bool IsApproved, 
                    string ImageURL, 
                    int Original_BaseItemID, 
                    string Original_ItemType, 
                    System.Guid Original_LocationID, 
                    int Original_TotalViews, 
                    double Original_TotalRatingScore, 
                    int Original_TotalRatingCount, 
                    global::System.Nullable<double> Original_AverageRating, 
                    string Original_Title, 
                    System.Guid Original_OwnerUserID, 
                    System.DateTime Original_CreateDate, 
                    string Original_SubType, 
                    int Original_PrivacyLevel, 
                    bool Original_IsApproved, 
                    string Original_ImageURL, 
                    int BaseItemID) {
            if ((ItemType == null)) {
                throw new global::System.ArgumentNullException("ItemType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ItemType));
            }
            if ((TagList == null)) {
                throw new global::System.ArgumentNullException("TagList");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TagList));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(LocationID));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(TotalViews));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(TotalRatingScore));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(TotalRatingCount));
            if ((AverageRating.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(AverageRating.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Title == null)) {
                throw new global::System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Title));
            }
            if ((Description == null)) {
                throw new global::System.ArgumentNullException("Description");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Description));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((System.Guid)(OwnerUserID));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(CreateDate));
            if ((SubType == null)) {
                throw new global::System.ArgumentNullException("SubType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(SubType));
            }
            this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(PrivacyLevel));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(IsApproved));
            if ((ImageURL == null)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(ImageURL));
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_BaseItemID));
            if ((Original_ItemType == null)) {
                throw new global::System.ArgumentNullException("Original_ItemType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_ItemType));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((System.Guid)(Original_LocationID));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_TotalViews));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(Original_TotalRatingScore));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((int)(Original_TotalRatingCount));
            if ((Original_AverageRating.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(Original_AverageRating.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[22].Value = global::System.DBNull.Value;
            }
            if ((Original_Title == null)) {
                throw new global::System.ArgumentNullException("Original_Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Title));
            }
            this.Adapter.UpdateCommand.Parameters[24].Value = ((System.Guid)(Original_OwnerUserID));
            this.Adapter.UpdateCommand.Parameters[25].Value = ((System.DateTime)(Original_CreateDate));
            if ((Original_SubType == null)) {
                throw new global::System.ArgumentNullException("Original_SubType");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_SubType));
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_PrivacyLevel));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((bool)(Original_IsApproved));
            if ((Original_ImageURL == null)) {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[30].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[29].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[30].Value = ((string)(Original_ImageURL));
            }
            this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(BaseItemID));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string ItemType, 
                    string TagList, 
                    System.Guid LocationID, 
                    int TotalViews, 
                    double TotalRatingScore, 
                    int TotalRatingCount, 
                    global::System.Nullable<double> AverageRating, 
                    string Title, 
                    string Description, 
                    System.Guid OwnerUserID, 
                    System.DateTime CreateDate, 
                    string SubType, 
                    int PrivacyLevel, 
                    bool IsApproved, 
                    string ImageURL, 
                    int Original_BaseItemID, 
                    string Original_ItemType, 
                    System.Guid Original_LocationID, 
                    int Original_TotalViews, 
                    double Original_TotalRatingScore, 
                    int Original_TotalRatingCount, 
                    global::System.Nullable<double> Original_AverageRating, 
                    string Original_Title, 
                    System.Guid Original_OwnerUserID, 
                    System.DateTime Original_CreateDate, 
                    string Original_SubType, 
                    int Original_PrivacyLevel, 
                    bool Original_IsApproved, 
                    string Original_ImageURL) {
            return this.Update(ItemType, TagList, LocationID, TotalViews, TotalRatingScore, TotalRatingCount, AverageRating, Title, Description, OwnerUserID, CreateDate, SubType, PrivacyLevel, IsApproved, ImageURL, Original_BaseItemID, Original_ItemType, Original_LocationID, Original_TotalViews, Original_TotalRatingScore, Original_TotalRatingCount, Original_AverageRating, Original_Title, Original_OwnerUserID, Original_CreateDate, Original_SubType, Original_PrivacyLevel, Original_IsApproved, Original_ImageURL, Original_BaseItemID);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AddThumbnailToCache(int baseItemID, int maximumWidth, int maximumHeight, byte[] bits) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((int)(baseItemID));
            command.Parameters[1].Value = ((int)(maximumWidth));
            command.Parameters[2].Value = ((int)(maximumHeight));
            if ((bits == null)) {
                throw new global::System.ArgumentNullException("bits");
            }
            else {
                command.Parameters[3].Value = ((byte[])(bits));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int ApproveBaseItem(int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int AssociateBaseItemWithBaseItem(int associatedBaseItemID, int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            command.Parameters[0].Value = ((int)(associatedBaseItemID));
            command.Parameters[1].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual object CreateBaseItem(string ItemType, string TagList, System.Guid LocationID, int TotalViews, double TotalRatingScore, int TotalRatingCount, string Title, string Description, System.Guid OwnerUserID, System.DateTime CreateDate, string SubType, int PrivacyLevel, bool IsApproved, string ImageURL) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((ItemType == null)) {
                throw new global::System.ArgumentNullException("ItemType");
            }
            else {
                command.Parameters[0].Value = ((string)(ItemType));
            }
            if ((TagList == null)) {
                throw new global::System.ArgumentNullException("TagList");
            }
            else {
                command.Parameters[1].Value = ((string)(TagList));
            }
            command.Parameters[2].Value = ((System.Guid)(LocationID));
            command.Parameters[3].Value = ((int)(TotalViews));
            command.Parameters[4].Value = ((double)(TotalRatingScore));
            command.Parameters[5].Value = ((int)(TotalRatingCount));
            if ((Title == null)) {
                throw new global::System.ArgumentNullException("Title");
            }
            else {
                command.Parameters[6].Value = ((string)(Title));
            }
            if ((Description == null)) {
                throw new global::System.ArgumentNullException("Description");
            }
            else {
                command.Parameters[7].Value = ((string)(Description));
            }
            command.Parameters[8].Value = ((System.Guid)(OwnerUserID));
            command.Parameters[9].Value = ((System.DateTime)(CreateDate));
            if ((SubType == null)) {
                throw new global::System.ArgumentNullException("SubType");
            }
            else {
                command.Parameters[10].Value = ((string)(SubType));
            }
            command.Parameters[11].Value = ((int)(PrivacyLevel));
            command.Parameters[12].Value = ((bool)(IsApproved));
            if ((ImageURL == null)) {
                throw new global::System.ArgumentNullException("ImageURL");
            }
            else {
                command.Parameters[13].Value = ((string)(ImageURL));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteAllBaseItemsForUser(System.Guid ownerUserID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            command.Parameters[0].Value = ((System.Guid)(ownerUserID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteBaseItem(int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            command.Parameters[0].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetItemType(int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[10];
            command.Parameters[0].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetRating(int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[11];
            command.Parameters[0].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual byte[] GetRawThumbnailBits(int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[12];
            command.Parameters[0].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((byte[])(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetThumbnail(int baseItemID, int maximumWidth, int maximumHeight) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[13];
            command.Parameters[0].Value = ((int)(baseItemID));
            command.Parameters[1].Value = ((int)(maximumWidth));
            command.Parameters[2].Value = ((int)(maximumHeight));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> GetUnapprovedBaseItemsCount() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[15];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual object RateItem(System.Guid userID, int baseItemID, int rating) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[16];
            command.Parameters[0].Value = ((System.Guid)(userID));
            command.Parameters[1].Value = ((int)(baseItemID));
            command.Parameters[2].Value = ((int)(rating));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int RemoveAssociatedBaseItemAssociations(int associatedBaseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[17];
            command.Parameters[0].Value = ((int)(associatedBaseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int RemoveAssociationFromBaseItem(int associatedBaseItemID, int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[18];
            command.Parameters[0].Value = ((int)(associatedBaseItemID));
            command.Parameters[1].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object SearchCount(string itemType, string subType, string tagSearchList, string locationSearchData) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[22];
            if ((itemType == null)) {
                throw new global::System.ArgumentNullException("itemType");
            }
            else {
                command.Parameters[0].Value = ((string)(itemType));
            }
            if ((subType == null)) {
                throw new global::System.ArgumentNullException("subType");
            }
            else {
                command.Parameters[1].Value = ((string)(subType));
            }
            if ((tagSearchList == null)) {
                throw new global::System.ArgumentNullException("tagSearchList");
            }
            else {
                command.Parameters[2].Value = ((string)(tagSearchList));
            }
            if ((locationSearchData == null)) {
                throw new global::System.ArgumentNullException("locationSearchData");
            }
            else {
                command.Parameters[3].Value = ((string)(locationSearchData));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int SetThumbnail(int baseItemID, byte[] thumbnailBits) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[23];
            command.Parameters[0].Value = ((int)(baseItemID));
            if ((thumbnailBits == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((byte[])(thumbnailBits));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int SetTotalViews(int baseItemID, int totalViews) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[24];
            command.Parameters[0].Value = ((int)(baseItemID));
            command.Parameters[1].Value = ((int)(totalViews));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateBaseItem(string tagList, System.Guid locationID, string title, string description, System.Guid ownerUserID, int privacyLevel, string imageURL, int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[25];
            if ((tagList == null)) {
                throw new global::System.ArgumentNullException("tagList");
            }
            else {
                command.Parameters[0].Value = ((string)(tagList));
            }
            command.Parameters[1].Value = ((System.Guid)(locationID));
            if ((title == null)) {
                throw new global::System.ArgumentNullException("title");
            }
            else {
                command.Parameters[2].Value = ((string)(title));
            }
            if ((description == null)) {
                throw new global::System.ArgumentNullException("description");
            }
            else {
                command.Parameters[3].Value = ((string)(description));
            }
            command.Parameters[4].Value = ((System.Guid)(ownerUserID));
            command.Parameters[5].Value = ((int)(privacyLevel));
            if ((imageURL == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(imageURL));
            }
            command.Parameters[7].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object VerifyBaseItemHasBits(int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[26];
            command.Parameters[0].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
    }
}

#pragma warning restore 1591