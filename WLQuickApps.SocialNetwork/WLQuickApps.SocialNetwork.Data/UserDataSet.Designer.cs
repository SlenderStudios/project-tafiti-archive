//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace WLQuickApps.SocialNetwork.Data {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("UserDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class UserDataSet : global::System.Data.DataSet {
        
        private UserDataTable tableUser;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected UserDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            UserDataSet cln = ((UserDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UserDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/UserDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            UserDataSet ds = new UserDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnFirstName;
            
            private global::System.Data.DataColumn columnLastName;
            
            private global::System.Data.DataColumn columnGender;
            
            private global::System.Data.DataColumn columnWindowsLiveUUID;
            
            private global::System.Data.DataColumn columnRSSFeedURL;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnLastLoginDate;
            
            private global::System.Data.DataColumn columnCreateDate;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnDOB;
            
            private global::System.Data.DataColumn columnBaseItemID;
            
            private global::System.Data.DataColumn columnMessengerPresenceID;
            
            private global::System.Data.DataColumn columnDomainToken;
            
            private global::System.Data.DataColumn columnOwnerHandle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FirstNameColumn {
                get {
                    return this.columnFirstName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastNameColumn {
                get {
                    return this.columnLastName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GenderColumn {
                get {
                    return this.columnGender;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WindowsLiveUUIDColumn {
                get {
                    return this.columnWindowsLiveUUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RSSFeedURLColumn {
                get {
                    return this.columnRSSFeedURL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastLoginDateColumn {
                get {
                    return this.columnLastLoginDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreateDateColumn {
                get {
                    return this.columnCreateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DOBColumn {
                get {
                    return this.columnDOB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BaseItemIDColumn {
                get {
                    return this.columnBaseItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessengerPresenceIDColumn {
                get {
                    return this.columnMessengerPresenceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DomainTokenColumn {
                get {
                    return this.columnDomainToken;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OwnerHandleColumn {
                get {
                    return this.columnOwnerHandle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(System.Guid UserID, string FirstName, string LastName, int Gender, string WindowsLiveUUID, string RSSFeedURL, string Email, System.DateTime LastLoginDate, System.DateTime CreateDate, string UserName, System.DateTime DOB, int BaseItemID, string MessengerPresenceID, string DomainToken, string OwnerHandle) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        UserID,
                        FirstName,
                        LastName,
                        Gender,
                        WindowsLiveUUID,
                        RSSFeedURL,
                        Email,
                        LastLoginDate,
                        CreateDate,
                        UserName,
                        DOB,
                        BaseItemID,
                        MessengerPresenceID,
                        DomainToken,
                        OwnerHandle};
                rowUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow FindByUserID(System.Guid UserID) {
                return ((UserRow)(this.Rows.Find(new object[] {
                            UserID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnFirstName = base.Columns["FirstName"];
                this.columnLastName = base.Columns["LastName"];
                this.columnGender = base.Columns["Gender"];
                this.columnWindowsLiveUUID = base.Columns["WindowsLiveUUID"];
                this.columnRSSFeedURL = base.Columns["RSSFeedURL"];
                this.columnEmail = base.Columns["Email"];
                this.columnLastLoginDate = base.Columns["LastLoginDate"];
                this.columnCreateDate = base.Columns["CreateDate"];
                this.columnUserName = base.Columns["UserName"];
                this.columnDOB = base.Columns["DOB"];
                this.columnBaseItemID = base.Columns["BaseItemID"];
                this.columnMessengerPresenceID = base.Columns["MessengerPresenceID"];
                this.columnDomainToken = base.Columns["DomainToken"];
                this.columnOwnerHandle = base.Columns["OwnerHandle"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnFirstName = new global::System.Data.DataColumn("FirstName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFirstName);
                this.columnLastName = new global::System.Data.DataColumn("LastName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastName);
                this.columnGender = new global::System.Data.DataColumn("Gender", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGender);
                this.columnWindowsLiveUUID = new global::System.Data.DataColumn("WindowsLiveUUID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWindowsLiveUUID);
                this.columnRSSFeedURL = new global::System.Data.DataColumn("RSSFeedURL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRSSFeedURL);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnLastLoginDate = new global::System.Data.DataColumn("LastLoginDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastLoginDate);
                this.columnCreateDate = new global::System.Data.DataColumn("CreateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreateDate);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnDOB = new global::System.Data.DataColumn("DOB", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDOB);
                this.columnBaseItemID = new global::System.Data.DataColumn("BaseItemID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBaseItemID);
                this.columnMessengerPresenceID = new global::System.Data.DataColumn("MessengerPresenceID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessengerPresenceID);
                this.columnDomainToken = new global::System.Data.DataColumn("DomainToken", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainToken);
                this.columnOwnerHandle = new global::System.Data.DataColumn("OwnerHandle", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOwnerHandle);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnUserID}, true));
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.Unique = true;
                this.columnFirstName.AllowDBNull = false;
                this.columnFirstName.MaxLength = 255;
                this.columnLastName.AllowDBNull = false;
                this.columnLastName.MaxLength = 255;
                this.columnWindowsLiveUUID.MaxLength = 255;
                this.columnRSSFeedURL.MaxLength = 255;
                this.columnEmail.MaxLength = 256;
                this.columnLastLoginDate.AllowDBNull = false;
                this.columnCreateDate.AllowDBNull = false;
                this.columnUserName.AllowDBNull = false;
                this.columnUserName.MaxLength = 256;
                this.columnBaseItemID.AllowDBNull = false;
                this.columnMessengerPresenceID.AllowDBNull = false;
                this.columnDomainToken.DefaultValue = ((string)("\"\""));
                this.columnOwnerHandle.DefaultValue = ((string)("\"\""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UserDataSet ds = new UserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserRow : global::System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid UserID {
                get {
                    return ((global::System.Guid)(this[this.tableUser.UserIDColumn]));
                }
                set {
                    this[this.tableUser.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FirstName {
                get {
                    return ((string)(this[this.tableUser.FirstNameColumn]));
                }
                set {
                    this[this.tableUser.FirstNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastName {
                get {
                    return ((string)(this[this.tableUser.LastNameColumn]));
                }
                set {
                    this[this.tableUser.LastNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Gender {
                get {
                    try {
                        return ((int)(this[this.tableUser.GenderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Gender\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.GenderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WindowsLiveUUID {
                get {
                    try {
                        return ((string)(this[this.tableUser.WindowsLiveUUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WindowsLiveUUID\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.WindowsLiveUUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RSSFeedURL {
                get {
                    if (this.IsRSSFeedURLNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUser.RSSFeedURLColumn]));
                    }
                }
                set {
                    this[this.tableUser.RSSFeedURLColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableUser.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastLoginDate {
                get {
                    return ((global::System.DateTime)(this[this.tableUser.LastLoginDateColumn]));
                }
                set {
                    this[this.tableUser.LastLoginDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableUser.CreateDateColumn]));
                }
                set {
                    this[this.tableUser.CreateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableUser.UserNameColumn]));
                }
                set {
                    this[this.tableUser.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime DOB {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUser.DOBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DOB\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.DOBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BaseItemID {
                get {
                    return ((int)(this[this.tableUser.BaseItemIDColumn]));
                }
                set {
                    this[this.tableUser.BaseItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MessengerPresenceID {
                get {
                    return ((string)(this[this.tableUser.MessengerPresenceIDColumn]));
                }
                set {
                    this[this.tableUser.MessengerPresenceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DomainToken {
                get {
                    if (this.IsDomainTokenNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUser.DomainTokenColumn]));
                    }
                }
                set {
                    this[this.tableUser.DomainTokenColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OwnerHandle {
                get {
                    try {
                        return ((string)(this[this.tableUser.OwnerHandleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OwnerHandle\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.OwnerHandleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGenderNull() {
                return this.IsNull(this.tableUser.GenderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGenderNull() {
                this[this.tableUser.GenderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWindowsLiveUUIDNull() {
                return this.IsNull(this.tableUser.WindowsLiveUUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWindowsLiveUUIDNull() {
                this[this.tableUser.WindowsLiveUUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRSSFeedURLNull() {
                return this.IsNull(this.tableUser.RSSFeedURLColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRSSFeedURLNull() {
                this[this.tableUser.RSSFeedURLColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableUser.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableUser.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDOBNull() {
                return this.IsNull(this.tableUser.DOBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDOBNull() {
                this[this.tableUser.DOBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDomainTokenNull() {
                return this.IsNull(this.tableUser.DomainTokenColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDomainTokenNull() {
                this[this.tableUser.DomainTokenColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOwnerHandleNull() {
                return this.IsNull(this.tableUser.OwnerHandleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOwnerHandleNull() {
                this[this.tableUser.OwnerHandleColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserRowChangeEvent : global::System.EventArgs {
            
            private UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace WLQuickApps.SocialNetwork.Data.UserDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "User";
            tableMapping.ColumnMappings.Add("UserID", "UserID");
            tableMapping.ColumnMappings.Add("FirstName", "FirstName");
            tableMapping.ColumnMappings.Add("LastName", "LastName");
            tableMapping.ColumnMappings.Add("Gender", "Gender");
            tableMapping.ColumnMappings.Add("WindowsLiveUUID", "WindowsLiveUUID");
            tableMapping.ColumnMappings.Add("RSSFeedURL", "RSSFeedURL");
            tableMapping.ColumnMappings.Add("Email", "Email");
            tableMapping.ColumnMappings.Add("LastLoginDate", "LastLoginDate");
            tableMapping.ColumnMappings.Add("CreateDate", "CreateDate");
            tableMapping.ColumnMappings.Add("UserName", "UserName");
            tableMapping.ColumnMappings.Add("DOB", "DOB");
            tableMapping.ColumnMappings.Add("BaseItemID", "BaseItemID");
            tableMapping.ColumnMappings.Add("MessengerPresenceID", "MessengerPresenceID");
            tableMapping.ColumnMappings.Add("DomainToken", "DomainToken");
            tableMapping.ColumnMappings.Add("OwnerHandle", "OwnerHandle");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::WLQuickApps.SocialNetwork.Data.Properties.Settings.Default.SocialNetworkConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[17];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, Profile.BaseItemID, 
                      aspnet_Membership.Email, aspnet_Membership.LastLoginDate, aspnet_Membership.CreateDate, aspnet_Users.UserName, Profile.MessengerPresenceID, 
                      Profile.DomainToken, Profile.OwnerHandle
FROM         Profile INNER JOIN
                      BaseItem ON Profile.BaseItemID = BaseItem.BaseItemID INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = @"INSERT INTO Profile
                      (UserID, FirstName, LastName, Gender, DOB, WindowsLiveUUID, RSSFeedURL, BaseItemID, MessengerPresenceID, DomainToken, OwnerHandle)
VALUES     (@userID,@firstName,@lastName,@gender,@dateOfBirth,@windowsLiveUUID,@rssFeedUrl,@baseItemID,@MessengerPresenceID,@DomainToken,@OwnerHandle)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@firstName", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastName", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gender", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Gender", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dateOfBirth", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "DOB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@windowsLiveUUID", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "WindowsLiveUUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rssFeedUrl", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "RSSFeedURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessengerPresenceID", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "MessengerPresenceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DomainToken", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, "DomainToken", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OwnerHandle", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerHandle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "DELETE FROM Profile WHERE UserID = @userID";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"WITH PageTable AS (SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, 
                                                                    Profile.BaseItemID, Profile.MessengerPresenceID, Profile.DomainToken, Profile.OwnerHandle, aspnet_Membership.Email, aspnet_Membership.LastLoginDate, 
                                                                    aspnet_Membership.CreateDate, aspnet_Users.UserName, ROW_NUMBER() OVER (ORDER BY aspnet_Membership.CreateDate DESC) 
AS RowID
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId INNER JOIN
                      UserGroup ON Profile.UserID = UserGroup.UserID
WHERE     UserGroup.BaseItemID = @baseItemID AND IsInviteAccepted = @isInviteAccepted AND IsApprovedByOwner = @isApprovedByOwner)
    SELECT     *
     FROM         PageTable
     WHERE     RowID BETWEEN (@startRowIndex + 1) AND (@startRowIndex + @maximumRows)";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isInviteAccepted", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsInviteAccepted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isApprovedByOwner", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsApprovedByOwner", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startRowIndex", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumRows", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = @"SELECT     COUNT(*) 
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId INNER JOIN
                      UserGroup ON Profile.UserID = UserGroup.UserID
WHERE     (UserGroup.BaseItemID = @baseItemID) AND (UserGroup.IsInviteAccepted = @isInviteAccepted) AND (UserGroup.IsApprovedByOwner = @isApprovedByOwner)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isInviteAccepted", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsInviteAccepted", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@isApprovedByOwner", global::System.Data.SqlDbType.Bit, 1, global::System.Data.ParameterDirection.Input, 0, 0, "IsApprovedByOwner", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = @"WITH PageTable AS (SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, 
                                                                    Profile.BaseItemID, Profile.MessengerPresenceID, Profile.DomainToken, Profile.OwnerHandle, aspnet_Membership.Email, 
                                                                    aspnet_Membership.LastLoginDate, aspnet_Membership.CreateDate, aspnet_Users.UserName, ROW_NUMBER() OVER (ORDER BY aspnet_Membership.CreateDate
                                                                     DESC) AS RowID
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId)
    SELECT     *
     FROM         PageTable
     WHERE     RowID BETWEEN (@startRowIndex + 1) AND (@startRowIndex + @maximumRows)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startRowIndex", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumRows", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = @"SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, Profile.BaseItemID, 
                      Profile.MessengerPresenceID, aspnet_Membership.Email, aspnet_Membership.LastLoginDate, aspnet_Membership.CreateDate, aspnet_Users.UserName, 
                      Profile.DomainToken, Profile.OwnerHandle
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId
WHERE     (Profile.BaseItemID = @baseItemID)";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = @"SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, Profile.BaseItemID, 
                      Profile.MessengerPresenceID, aspnet_Membership.Email, aspnet_Membership.LastLoginDate, aspnet_Membership.CreateDate, aspnet_Users.UserName, 
                      Profile.DomainToken, Profile.OwnerHandle
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId
WHERE     (aspnet_Membership.Email = @email)";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@email", global::System.Data.SqlDbType.NVarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "Email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = @"SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, Profile.BaseItemID, 
                      Profile.MessengerPresenceID, aspnet_Membership.Email, aspnet_Membership.LastLoginDate, aspnet_Membership.CreateDate, aspnet_Users.UserName, 
                      Profile.DomainToken, Profile.OwnerHandle
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId
WHERE     (Profile.UserID = @userID)";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = @"SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, Profile.BaseItemID, 
                      Profile.MessengerPresenceID, aspnet_Membership.Email, aspnet_Membership.LastLoginDate, aspnet_Membership.CreateDate, aspnet_Users.UserName, 
                      Profile.DomainToken, Profile.OwnerHandle
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId
WHERE     (aspnet_Users.UserName = @userName)";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userName", global::System.Data.SqlDbType.NVarChar, 256, global::System.Data.ParameterDirection.Input, 0, 0, "UserName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[10] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[10].Connection = this.Connection;
            this._commandCollection[10].CommandText = @"SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, Profile.BaseItemID, 
                      Profile.MessengerPresenceID, aspnet_Membership.Email, aspnet_Membership.LastLoginDate, aspnet_Membership.CreateDate, aspnet_Users.UserName, 
                      Profile.DomainToken, Profile.OwnerHandle
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId
WHERE     (Profile.WindowsLiveUUID = @windowsLiveUUID)";
            this._commandCollection[10].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[10].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@windowsLiveUUID", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "WindowsLiveUUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[11] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[11].Connection = this.Connection;
            this._commandCollection[11].CommandText = "SELECT        count(*) from Profile";
            this._commandCollection[11].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[12].Connection = this.Connection;
            this._commandCollection[12].CommandText = @"WITH PageTable AS (SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, 
                                                                    Profile.BaseItemID, Profile.MessengerPresenceID, Profile.DomainToken, Profile.OwnerHandle, aspnet_Membership.Email, 
                                                                    aspnet_Membership.LastLoginDate, aspnet_Membership.CreateDate, aspnet_Users.UserName, ROW_NUMBER() OVER (ORDER BY aspnet_Membership.CreateDate
                                                                     DESC) AS RowID
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId
WHERE     Profile.FirstName = @firstName AND Profile.LastName = @lastName)
    SELECT     *
     FROM         PageTable
     WHERE     RowID BETWEEN (@startRowIndex + 1) AND (@startRowIndex + @maximumRows)";
            this._commandCollection[12].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@firstName", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastName", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startRowIndex", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[12].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumRows", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[13].Connection = this.Connection;
            this._commandCollection[13].CommandText = @"select count (*)
FROM            Profile INNER JOIN
                         aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                         aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId
WHERE Profile.FirstName = @firstName AND Profile.LastName = @lastName
";
            this._commandCollection[13].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@firstName", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[13].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastName", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[14].Connection = this.Connection;
            this._commandCollection[14].CommandText = @"WITH PageTable AS (SELECT     Profile.UserID, Profile.FirstName, Profile.LastName, Profile.Gender, Profile.DOB, Profile.WindowsLiveUUID, Profile.RSSFeedURL, 
                                                                    Profile.BaseItemID, Profile.MessengerPresenceID, Profile.DomainToken, Profile.OwnerHandle,  aspnet_Membership.Email, aspnet_Membership.LastLoginDate, 
                                                                    aspnet_Membership.CreateDate, aspnet_Users.UserName, ROW_NUMBER() OVER (ORDER BY aspnet_Membership.CreateDate DESC) 
AS RowID
FROM         Profile INNER JOIN
                      aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                      aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId INNER JOIN
                      UserGroup ON aspnet_Users.UserId = UserGroup.UserID
WHERE     UserGroup.BaseItemID = @baseItemID AND UserGroup.IsInviteAccepted = 'True' AND UserGroup.IsApprovedByOwner = 'True')
    SELECT     *
     FROM         PageTable
     WHERE     RowID BETWEEN (@startRowIndex + 1) AND (@startRowIndex + @maximumRows)";
            this._commandCollection[14].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[14].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@startRowIndex", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[14].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maximumRows", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, null, global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[15] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[15].Connection = this.Connection;
            this._commandCollection[15].CommandText = @"SELECT        count(*)
FROM            Profile INNER JOIN
                         aspnet_Membership ON Profile.UserID = aspnet_Membership.UserId INNER JOIN
                         aspnet_Users ON Profile.UserID = aspnet_Users.UserId AND aspnet_Membership.UserId = aspnet_Users.UserId INNER JOIN
                         UserGroup ON aspnet_Users.UserId = UserGroup.UserID
where UserGroup.BaseItemID = @baseItemID and UserGroup.IsInviteAccepted = 'True' and UserGroup.IsApprovedByOwner = 'True'
";
            this._commandCollection[15].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[15].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@baseItemID", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "BaseItemID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[16].Connection = this.Connection;
            this._commandCollection[16].CommandText = @"UPDATE    Profile
SET              FirstName = @firstName, LastName = @lastName, Gender = @gender, DOB = @dateOfBirth, WindowsLiveUUID = @windowsLiveUUID, RSSFeedURL = @rssFeedUrl, 
                      MessengerPresenceID = @MessengerPresenceID, DomainToken = @DomainToken, OwnerHandle = @OwnerHandle
WHERE     (UserID = @userID)";
            this._commandCollection[16].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@firstName", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "FirstName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastName", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "LastName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@gender", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Gender", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@dateOfBirth", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "DOB", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@windowsLiveUUID", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "WindowsLiveUUID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rssFeedUrl", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "RSSFeedURL", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MessengerPresenceID", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "MessengerPresenceID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DomainToken", global::System.Data.SqlDbType.VarChar, 500, global::System.Data.ParameterDirection.Input, 0, 0, "DomainToken", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@OwnerHandle", global::System.Data.SqlDbType.VarChar, 255, global::System.Data.ParameterDirection.Input, 0, 0, "OwnerHandle", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[16].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userID", global::System.Data.SqlDbType.UniqueIdentifier, 16, global::System.Data.ParameterDirection.Input, 0, 0, "UserID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(UserDataSet.UserDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual UserDataSet.UserDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual UserDataSet.UserDataTable GetAllUsersForGroup(int baseItemID, bool isInviteAccepted, bool isApprovedByOwner, int startRowIndex, int maximumRows) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(baseItemID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((bool)(isInviteAccepted));
            this.Adapter.SelectCommand.Parameters[2].Value = ((bool)(isApprovedByOwner));
            this.Adapter.SelectCommand.Parameters[3].Value = ((int)(startRowIndex));
            this.Adapter.SelectCommand.Parameters[4].Value = ((int)(maximumRows));
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual UserDataSet.UserDataTable GetRecentlyCreatedUsers(int startRowIndex, int maximumRows) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(startRowIndex));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(maximumRows));
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual UserDataSet.UserDataTable GetUserByBaseItemID(int baseItemID) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(baseItemID));
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual UserDataSet.UserDataTable GetUserByEmail(string email) {
            this.Adapter.SelectCommand = this.CommandCollection[7];
            if ((email == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(email));
            }
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual UserDataSet.UserDataTable GetUserByUserID(System.Guid userID) {
            this.Adapter.SelectCommand = this.CommandCollection[8];
            this.Adapter.SelectCommand.Parameters[0].Value = ((System.Guid)(userID));
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual UserDataSet.UserDataTable GetUserByUserName(string userName) {
            this.Adapter.SelectCommand = this.CommandCollection[9];
            if ((userName == null)) {
                throw new global::System.ArgumentNullException("userName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userName));
            }
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual UserDataSet.UserDataTable GetUserByWindowsLiveUUID(string windowsLiveUUID) {
            this.Adapter.SelectCommand = this.CommandCollection[10];
            if ((windowsLiveUUID == null)) {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(windowsLiveUUID));
            }
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual UserDataSet.UserDataTable GetUsersByFullName(string firstName, string lastName, int startRowIndex, int maximumRows) {
            this.Adapter.SelectCommand = this.CommandCollection[12];
            if ((firstName == null)) {
                throw new global::System.ArgumentNullException("firstName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(firstName));
            }
            if ((lastName == null)) {
                throw new global::System.ArgumentNullException("lastName");
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = ((string)(lastName));
            }
            this.Adapter.SelectCommand.Parameters[2].Value = ((int)(startRowIndex));
            this.Adapter.SelectCommand.Parameters[3].Value = ((int)(maximumRows));
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual UserDataSet.UserDataTable GetUserSetByBaseItemID(int baseItemID, int startRowIndex, int maximumRows) {
            this.Adapter.SelectCommand = this.CommandCollection[14];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(baseItemID));
            this.Adapter.SelectCommand.Parameters[1].Value = ((int)(startRowIndex));
            this.Adapter.SelectCommand.Parameters[2].Value = ((int)(maximumRows));
            UserDataSet.UserDataTable dataTable = new UserDataSet.UserDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int CreateProfile(System.Guid userID, string firstName, string lastName, global::System.Nullable<int> gender, global::System.Nullable<global::System.DateTime> dateOfBirth, string windowsLiveUUID, string rssFeedUrl, int baseItemID, string MessengerPresenceID, string DomainToken, string OwnerHandle) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            command.Parameters[0].Value = ((System.Guid)(userID));
            if ((firstName == null)) {
                throw new global::System.ArgumentNullException("firstName");
            }
            else {
                command.Parameters[1].Value = ((string)(firstName));
            }
            if ((lastName == null)) {
                throw new global::System.ArgumentNullException("lastName");
            }
            else {
                command.Parameters[2].Value = ((string)(lastName));
            }
            if ((gender.HasValue == true)) {
                command.Parameters[3].Value = ((int)(gender.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((dateOfBirth.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(dateOfBirth.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((windowsLiveUUID == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(windowsLiveUUID));
            }
            if ((rssFeedUrl == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(rssFeedUrl));
            }
            command.Parameters[7].Value = ((int)(baseItemID));
            if ((MessengerPresenceID == null)) {
                throw new global::System.ArgumentNullException("MessengerPresenceID");
            }
            else {
                command.Parameters[8].Value = ((string)(MessengerPresenceID));
            }
            if ((DomainToken == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(DomainToken));
            }
            if ((OwnerHandle == null)) {
                command.Parameters[10].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[10].Value = ((string)(OwnerHandle));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteProfile(System.Guid userID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            command.Parameters[0].Value = ((System.Guid)(userID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetAllUsersForGroupCount(int baseItemID, bool isInviteAccepted, bool isApprovedByOwner) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            command.Parameters[0].Value = ((int)(baseItemID));
            command.Parameters[1].Value = ((bool)(isInviteAccepted));
            command.Parameters[2].Value = ((bool)(isApprovedByOwner));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual global::System.Nullable<int> GetUserCount() {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[11];
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return new global::System.Nullable<int>();
            }
            else {
                return new global::System.Nullable<int>(((int)(returnValue)));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetUsersByFullNameCount(string firstName, string lastName) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[13];
            if ((firstName == null)) {
                throw new global::System.ArgumentNullException("firstName");
            }
            else {
                command.Parameters[0].Value = ((string)(firstName));
            }
            if ((lastName == null)) {
                throw new global::System.ArgumentNullException("lastName");
            }
            else {
                command.Parameters[1].Value = ((string)(lastName));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual object GetUserSetByBaseItemIDCount(int baseItemID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[15];
            command.Parameters[0].Value = ((int)(baseItemID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            object returnValue;
            try {
                returnValue = command.ExecuteScalar();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            if (((returnValue == null) 
                        || (returnValue.GetType() == typeof(global::System.DBNull)))) {
                return null;
            }
            else {
                return ((object)(returnValue));
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int UpdateProfile(string firstName, string lastName, global::System.Nullable<int> gender, global::System.Nullable<global::System.DateTime> dateOfBirth, string windowsLiveUUID, string rssFeedUrl, string MessengerPresenceID, string DomainToken, string OwnerHandle, System.Guid userID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[16];
            if ((firstName == null)) {
                throw new global::System.ArgumentNullException("firstName");
            }
            else {
                command.Parameters[0].Value = ((string)(firstName));
            }
            if ((lastName == null)) {
                throw new global::System.ArgumentNullException("lastName");
            }
            else {
                command.Parameters[1].Value = ((string)(lastName));
            }
            if ((gender.HasValue == true)) {
                command.Parameters[2].Value = ((int)(gender.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((dateOfBirth.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(dateOfBirth.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((windowsLiveUUID == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(windowsLiveUUID));
            }
            if ((rssFeedUrl == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(rssFeedUrl));
            }
            if ((MessengerPresenceID == null)) {
                throw new global::System.ArgumentNullException("MessengerPresenceID");
            }
            else {
                command.Parameters[6].Value = ((string)(MessengerPresenceID));
            }
            if ((DomainToken == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(DomainToken));
            }
            if ((OwnerHandle == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(OwnerHandle));
            }
            command.Parameters[9].Value = ((System.Guid)(userID));
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
}

#pragma warning restore 1591