#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WLQuickApps.FieldManager.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="FieldManager")]
	public partial class FieldManagerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertaspnet_User(aspnet_User instance);
    partial void Updateaspnet_User(aspnet_User instance);
    partial void Deleteaspnet_User(aspnet_User instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertLeague(League instance);
    partial void UpdateLeague(League instance);
    partial void DeleteLeague(League instance);
    partial void InsertUserLeague(UserLeague instance);
    partial void UpdateUserLeague(UserLeague instance);
    partial void DeleteUserLeague(UserLeague instance);
    partial void InsertLeagueAdmin(LeagueAdmin instance);
    partial void UpdateLeagueAdmin(LeagueAdmin instance);
    partial void DeleteLeagueAdmin(LeagueAdmin instance);
    partial void InsertFieldAdmin(FieldAdmin instance);
    partial void UpdateFieldAdmin(FieldAdmin instance);
    partial void DeleteFieldAdmin(FieldAdmin instance);
    partial void InsertField(Field instance);
    partial void UpdateField(Field instance);
    partial void DeleteField(Field instance);
    partial void InsertUserField(UserField instance);
    partial void UpdateUserField(UserField instance);
    partial void DeleteUserField(UserField instance);
    partial void InsertLeagueField(LeagueField instance);
    partial void UpdateLeagueField(LeagueField instance);
    partial void DeleteLeagueField(LeagueField instance);
    #endregion
		
		public FieldManagerDataContext() : 
				base(global::WLQuickApps.FieldManager.Data.Properties.Settings.Default.FieldManagerConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FieldManagerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FieldManagerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FieldManagerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FieldManagerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<aspnet_User> aspnet_Users
		{
			get
			{
				return this.GetTable<aspnet_User>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<League> Leagues
		{
			get
			{
				return this.GetTable<League>();
			}
		}
		
		public System.Data.Linq.Table<UserLeague> UserLeagues
		{
			get
			{
				return this.GetTable<UserLeague>();
			}
		}
		
		public System.Data.Linq.Table<LeagueAdmin> LeagueAdmins
		{
			get
			{
				return this.GetTable<LeagueAdmin>();
			}
		}
		
		public System.Data.Linq.Table<FieldAdmin> FieldAdmins
		{
			get
			{
				return this.GetTable<FieldAdmin>();
			}
		}
		
		public System.Data.Linq.Table<Field> Fields
		{
			get
			{
				return this.GetTable<Field>();
			}
		}
		
		public System.Data.Linq.Table<UserField> UserFields
		{
			get
			{
				return this.GetTable<UserField>();
			}
		}
		
		public System.Data.Linq.Table<LeagueField> LeagueFields
		{
			get
			{
				return this.GetTable<LeagueField>();
			}
		}
	}
	
	[Table(Name="dbo.aspnet_Users")]
	public partial class aspnet_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _ApplicationId;
		
		private System.Guid _UserId;
		
		private string _UserName;
		
		private string _LoweredUserName;
		
		private string _MobileAlias;
		
		private bool _IsAnonymous;
		
		private System.DateTime _LastActivityDate;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnApplicationIdChanging(System.Guid value);
    partial void OnApplicationIdChanged();
    partial void OnUserIdChanging(System.Guid value);
    partial void OnUserIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnLoweredUserNameChanging(string value);
    partial void OnLoweredUserNameChanged();
    partial void OnMobileAliasChanging(string value);
    partial void OnMobileAliasChanged();
    partial void OnIsAnonymousChanging(bool value);
    partial void OnIsAnonymousChanged();
    partial void OnLastActivityDateChanging(System.DateTime value);
    partial void OnLastActivityDateChanged();
    #endregion
		
		public aspnet_User()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_ApplicationId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid ApplicationId
		{
			get
			{
				return this._ApplicationId;
			}
			set
			{
				if ((this._ApplicationId != value))
				{
					this.OnApplicationIdChanging(value);
					this.SendPropertyChanging();
					this._ApplicationId = value;
					this.SendPropertyChanged("ApplicationId");
					this.OnApplicationIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_LoweredUserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string LoweredUserName
		{
			get
			{
				return this._LoweredUserName;
			}
			set
			{
				if ((this._LoweredUserName != value))
				{
					this.OnLoweredUserNameChanging(value);
					this.SendPropertyChanging();
					this._LoweredUserName = value;
					this.SendPropertyChanged("LoweredUserName");
					this.OnLoweredUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_MobileAlias", DbType="NVarChar(16)")]
		public string MobileAlias
		{
			get
			{
				return this._MobileAlias;
			}
			set
			{
				if ((this._MobileAlias != value))
				{
					this.OnMobileAliasChanging(value);
					this.SendPropertyChanging();
					this._MobileAlias = value;
					this.SendPropertyChanged("MobileAlias");
					this.OnMobileAliasChanged();
				}
			}
		}
		
		[Column(Storage="_IsAnonymous", DbType="Bit NOT NULL")]
		public bool IsAnonymous
		{
			get
			{
				return this._IsAnonymous;
			}
			set
			{
				if ((this._IsAnonymous != value))
				{
					this.OnIsAnonymousChanging(value);
					this.SendPropertyChanging();
					this._IsAnonymous = value;
					this.SendPropertyChanged("IsAnonymous");
					this.OnIsAnonymousChanged();
				}
			}
		}
		
		[Column(Storage="_LastActivityDate", DbType="DateTime NOT NULL")]
		public System.DateTime LastActivityDate
		{
			get
			{
				return this._LastActivityDate;
			}
			set
			{
				if ((this._LastActivityDate != value))
				{
					this.OnLastActivityDateChanging(value);
					this.SendPropertyChanging();
					this._LastActivityDate = value;
					this.SendPropertyChanged("LastActivityDate");
					this.OnLastActivityDateChanged();
				}
			}
		}
		
		[Association(Name="aspnet_User_User", Storage="_User", ThisKey="UserId", IsUnique=true, IsForeignKey=false)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.aspnet_User = null;
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.aspnet_User = this;
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private string _LiveIDToken;
		
		private string _Address;
		
		private string _MessengerPresenceID;
		
		private string _DisplayName;
		
		private EntitySet<UserLeague> _UserLeagues;
		
		private EntitySet<LeagueAdmin> _LeagueAdmins;
		
		private EntitySet<FieldAdmin> _FieldAdmins;
		
		private EntitySet<UserField> _UserFields;
		
		private EntityRef<aspnet_User> _aspnet_User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnLiveIDTokenChanging(string value);
    partial void OnLiveIDTokenChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnMessengerPresenceIDChanging(string value);
    partial void OnMessengerPresenceIDChanged();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    #endregion
		
		public User()
		{
			this._UserLeagues = new EntitySet<UserLeague>(new Action<UserLeague>(this.attach_UserLeagues), new Action<UserLeague>(this.detach_UserLeagues));
			this._LeagueAdmins = new EntitySet<LeagueAdmin>(new Action<LeagueAdmin>(this.attach_LeagueAdmins), new Action<LeagueAdmin>(this.detach_LeagueAdmins));
			this._FieldAdmins = new EntitySet<FieldAdmin>(new Action<FieldAdmin>(this.attach_FieldAdmins), new Action<FieldAdmin>(this.detach_FieldAdmins));
			this._UserFields = new EntitySet<UserField>(new Action<UserField>(this.attach_UserFields), new Action<UserField>(this.detach_UserFields));
			this._aspnet_User = default(EntityRef<aspnet_User>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._aspnet_User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_LiveIDToken", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string LiveIDToken
		{
			get
			{
				return this._LiveIDToken;
			}
			set
			{
				if ((this._LiveIDToken != value))
				{
					this.OnLiveIDTokenChanging(value);
					this.SendPropertyChanging();
					this._LiveIDToken = value;
					this.SendPropertyChanged("LiveIDToken");
					this.OnLiveIDTokenChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_MessengerPresenceID", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string MessengerPresenceID
		{
			get
			{
				return this._MessengerPresenceID;
			}
			set
			{
				if ((this._MessengerPresenceID != value))
				{
					this.OnMessengerPresenceIDChanging(value);
					this.SendPropertyChanging();
					this._MessengerPresenceID = value;
					this.SendPropertyChanged("MessengerPresenceID");
					this.OnMessengerPresenceIDChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayName", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Association(Name="User_UserLeague", Storage="_UserLeagues", OtherKey="UserID")]
		public EntitySet<UserLeague> UserLeagues
		{
			get
			{
				return this._UserLeagues;
			}
			set
			{
				this._UserLeagues.Assign(value);
			}
		}
		
		[Association(Name="User_LeagueAdmin", Storage="_LeagueAdmins", OtherKey="UserID")]
		public EntitySet<LeagueAdmin> LeagueAdmins
		{
			get
			{
				return this._LeagueAdmins;
			}
			set
			{
				this._LeagueAdmins.Assign(value);
			}
		}
		
		[Association(Name="User_FieldAdmin", Storage="_FieldAdmins", OtherKey="UserID")]
		public EntitySet<FieldAdmin> FieldAdmins
		{
			get
			{
				return this._FieldAdmins;
			}
			set
			{
				this._FieldAdmins.Assign(value);
			}
		}
		
		[Association(Name="User_UserField", Storage="_UserFields", OtherKey="UserID")]
		public EntitySet<UserField> UserFields
		{
			get
			{
				return this._UserFields;
			}
			set
			{
				this._UserFields.Assign(value);
			}
		}
		
		[Association(Name="aspnet_User_User", Storage="_aspnet_User", ThisKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public aspnet_User aspnet_User
		{
			get
			{
				return this._aspnet_User.Entity;
			}
			set
			{
				aspnet_User previousValue = this._aspnet_User.Entity;
				if (((previousValue != value) 
							|| (this._aspnet_User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._aspnet_User.Entity = null;
						previousValue.User = null;
					}
					this._aspnet_User.Entity = value;
					if ((value != null))
					{
						value.User = this;
						this._UserID = value.UserId;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("aspnet_User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLeagues(UserLeague entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserLeagues(UserLeague entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_LeagueAdmins(LeagueAdmin entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_LeagueAdmins(LeagueAdmin entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_FieldAdmins(FieldAdmin entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_FieldAdmins(FieldAdmin entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_UserFields(UserField entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_UserFields(UserField entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[Table(Name="dbo.Leagues")]
	public partial class League : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeagueID;
		
		private string _Type;
		
		private string _Title;
		
		private string _Description;
		
		private EntitySet<UserLeague> _UserLeagues;
		
		private EntitySet<LeagueAdmin> _LeagueAdmins;
		
		private EntitySet<LeagueField> _LeagueFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public League()
		{
			this._UserLeagues = new EntitySet<UserLeague>(new Action<UserLeague>(this.attach_UserLeagues), new Action<UserLeague>(this.detach_UserLeagues));
			this._LeagueAdmins = new EntitySet<LeagueAdmin>(new Action<LeagueAdmin>(this.attach_LeagueAdmins), new Action<LeagueAdmin>(this.detach_LeagueAdmins));
			this._LeagueFields = new EntitySet<LeagueField>(new Action<LeagueField>(this.attach_LeagueFields), new Action<LeagueField>(this.detach_LeagueFields));
			OnCreated();
		}
		
		[Column(Storage="_LeagueID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="League_UserLeague", Storage="_UserLeagues", OtherKey="LeagueID")]
		public EntitySet<UserLeague> UserLeagues
		{
			get
			{
				return this._UserLeagues;
			}
			set
			{
				this._UserLeagues.Assign(value);
			}
		}
		
		[Association(Name="League_LeagueAdmin", Storage="_LeagueAdmins", OtherKey="LeagueID")]
		public EntitySet<LeagueAdmin> LeagueAdmins
		{
			get
			{
				return this._LeagueAdmins;
			}
			set
			{
				this._LeagueAdmins.Assign(value);
			}
		}
		
		[Association(Name="League_LeagueField", Storage="_LeagueFields", OtherKey="LeagueID")]
		public EntitySet<LeagueField> LeagueFields
		{
			get
			{
				return this._LeagueFields;
			}
			set
			{
				this._LeagueFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserLeagues(UserLeague entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_UserLeagues(UserLeague entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
		
		private void attach_LeagueAdmins(LeagueAdmin entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_LeagueAdmins(LeagueAdmin entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
		
		private void attach_LeagueFields(LeagueField entity)
		{
			this.SendPropertyChanging();
			entity.League = this;
		}
		
		private void detach_LeagueFields(LeagueField entity)
		{
			this.SendPropertyChanging();
			entity.League = null;
		}
	}
	
	[Table(Name="dbo.UserLeagues")]
	public partial class UserLeague : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private int _LeagueID;
		
		private EntityRef<League> _League;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    #endregion
		
		public UserLeague()
		{
			this._League = default(EntityRef<League>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_LeagueID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Association(Name="League_UserLeague", Storage="_League", ThisKey="LeagueID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.UserLeagues.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.UserLeagues.Add(this);
						this._LeagueID = value.LeagueID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		[Association(Name="User_UserLeague", Storage="_User", ThisKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserLeagues.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserLeagues.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LeagueAdmins")]
	public partial class LeagueAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeagueID;
		
		private System.Guid _UserID;
		
		private EntityRef<League> _League;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    #endregion
		
		public LeagueAdmin()
		{
			this._League = default(EntityRef<League>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_LeagueID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="League_LeagueAdmin", Storage="_League", ThisKey="LeagueID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.LeagueAdmins.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.LeagueAdmins.Add(this);
						this._LeagueID = value.LeagueID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		[Association(Name="User_LeagueAdmin", Storage="_User", ThisKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.LeagueAdmins.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.LeagueAdmins.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.FieldAdmins")]
	public partial class FieldAdmin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldID;
		
		private System.Guid _UserID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Field> _Field;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    #endregion
		
		public FieldAdmin()
		{
			this._User = default(EntityRef<User>);
			this._Field = default(EntityRef<Field>);
			OnCreated();
		}
		
		[Column(Storage="_FieldID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="User_FieldAdmin", Storage="_User", ThisKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.FieldAdmins.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.FieldAdmins.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[Association(Name="Field_FieldAdmin", Storage="_Field", ThisKey="FieldID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.FieldAdmins.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.FieldAdmins.Add(this);
						this._FieldID = value.FieldID;
					}
					else
					{
						this._FieldID = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Fields")]
	public partial class Field : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FieldID;
		
		private string _Title;
		
		private string _Description;
		
		private string _Address;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private bool _IsOpen;
		
		private int _NumberOfFields;
		
		private string _ParkingLot;
		
		private string _PhoneNumber;
		
		private string _Status;
		
		private EntitySet<FieldAdmin> _FieldAdmins;
		
		private EntitySet<UserField> _UserFields;
		
		private EntitySet<LeagueField> _LeagueFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnIsOpenChanging(bool value);
    partial void OnIsOpenChanged();
    partial void OnNumberOfFieldsChanging(int value);
    partial void OnNumberOfFieldsChanged();
    partial void OnParkingLotChanging(string value);
    partial void OnParkingLotChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public Field()
		{
			this._FieldAdmins = new EntitySet<FieldAdmin>(new Action<FieldAdmin>(this.attach_FieldAdmins), new Action<FieldAdmin>(this.detach_FieldAdmins));
			this._UserFields = new EntitySet<UserField>(new Action<UserField>(this.attach_UserFields), new Action<UserField>(this.detach_UserFields));
			this._LeagueFields = new EntitySet<LeagueField>(new Action<LeagueField>(this.attach_LeagueFields), new Action<LeagueField>(this.detach_LeagueFields));
			OnCreated();
		}
		
		[Column(Storage="_FieldID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_IsOpen", DbType="Bit NOT NULL")]
		public bool IsOpen
		{
			get
			{
				return this._IsOpen;
			}
			set
			{
				if ((this._IsOpen != value))
				{
					this.OnIsOpenChanging(value);
					this.SendPropertyChanging();
					this._IsOpen = value;
					this.SendPropertyChanged("IsOpen");
					this.OnIsOpenChanged();
				}
			}
		}
		
		[Column(Storage="_NumberOfFields", DbType="Int NOT NULL")]
		public int NumberOfFields
		{
			get
			{
				return this._NumberOfFields;
			}
			set
			{
				if ((this._NumberOfFields != value))
				{
					this.OnNumberOfFieldsChanging(value);
					this.SendPropertyChanging();
					this._NumberOfFields = value;
					this.SendPropertyChanged("NumberOfFields");
					this.OnNumberOfFieldsChanged();
				}
			}
		}
		
		[Column(Storage="_ParkingLot", DbType="NVarChar(64) NOT NULL", CanBeNull=false)]
		public string ParkingLot
		{
			get
			{
				return this._ParkingLot;
			}
			set
			{
				if ((this._ParkingLot != value))
				{
					this.OnParkingLotChanging(value);
					this.SendPropertyChanging();
					this._ParkingLot = value;
					this.SendPropertyChanged("ParkingLot");
					this.OnParkingLotChanged();
				}
			}
		}
		
		[Column(Storage="_PhoneNumber", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="NText NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="Field_FieldAdmin", Storage="_FieldAdmins", OtherKey="FieldID")]
		public EntitySet<FieldAdmin> FieldAdmins
		{
			get
			{
				return this._FieldAdmins;
			}
			set
			{
				this._FieldAdmins.Assign(value);
			}
		}
		
		[Association(Name="Field_UserField", Storage="_UserFields", OtherKey="FieldID")]
		public EntitySet<UserField> UserFields
		{
			get
			{
				return this._UserFields;
			}
			set
			{
				this._UserFields.Assign(value);
			}
		}
		
		[Association(Name="Field_LeagueField", Storage="_LeagueFields", OtherKey="FieldID")]
		public EntitySet<LeagueField> LeagueFields
		{
			get
			{
				return this._LeagueFields;
			}
			set
			{
				this._LeagueFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FieldAdmins(FieldAdmin entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_FieldAdmins(FieldAdmin entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
		
		private void attach_UserFields(UserField entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_UserFields(UserField entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
		
		private void attach_LeagueFields(LeagueField entity)
		{
			this.SendPropertyChanging();
			entity.Field = this;
		}
		
		private void detach_LeagueFields(LeagueField entity)
		{
			this.SendPropertyChanging();
			entity.Field = null;
		}
	}
	
	[Table(Name="dbo.UserFields")]
	public partial class UserField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UserID;
		
		private int _FieldID;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(System.Guid value);
    partial void OnUserIDChanged();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    #endregion
		
		public UserField()
		{
			this._Field = default(EntityRef<Field>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[Association(Name="Field_UserField", Storage="_Field", ThisKey="FieldID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.UserFields.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.UserFields.Add(this);
						this._FieldID = value.FieldID;
					}
					else
					{
						this._FieldID = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[Association(Name="User_UserField", Storage="_User", ThisKey="UserID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.UserFields.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.UserFields.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.LeagueFields")]
	public partial class LeagueField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LeagueID;
		
		private int _FieldID;
		
		private EntityRef<Field> _Field;
		
		private EntityRef<League> _League;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLeagueIDChanging(int value);
    partial void OnLeagueIDChanged();
    partial void OnFieldIDChanging(int value);
    partial void OnFieldIDChanged();
    #endregion
		
		public LeagueField()
		{
			this._Field = default(EntityRef<Field>);
			this._League = default(EntityRef<League>);
			OnCreated();
		}
		
		[Column(Storage="_LeagueID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LeagueID
		{
			get
			{
				return this._LeagueID;
			}
			set
			{
				if ((this._LeagueID != value))
				{
					if (this._League.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLeagueIDChanging(value);
					this.SendPropertyChanging();
					this._LeagueID = value;
					this.SendPropertyChanged("LeagueID");
					this.OnLeagueIDChanged();
				}
			}
		}
		
		[Column(Storage="_FieldID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FieldID
		{
			get
			{
				return this._FieldID;
			}
			set
			{
				if ((this._FieldID != value))
				{
					if (this._Field.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFieldIDChanging(value);
					this.SendPropertyChanging();
					this._FieldID = value;
					this.SendPropertyChanged("FieldID");
					this.OnFieldIDChanged();
				}
			}
		}
		
		[Association(Name="Field_LeagueField", Storage="_Field", ThisKey="FieldID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Field Field
		{
			get
			{
				return this._Field.Entity;
			}
			set
			{
				Field previousValue = this._Field.Entity;
				if (((previousValue != value) 
							|| (this._Field.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Field.Entity = null;
						previousValue.LeagueFields.Remove(this);
					}
					this._Field.Entity = value;
					if ((value != null))
					{
						value.LeagueFields.Add(this);
						this._FieldID = value.FieldID;
					}
					else
					{
						this._FieldID = default(int);
					}
					this.SendPropertyChanged("Field");
				}
			}
		}
		
		[Association(Name="League_LeagueField", Storage="_League", ThisKey="LeagueID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public League League
		{
			get
			{
				return this._League.Entity;
			}
			set
			{
				League previousValue = this._League.Entity;
				if (((previousValue != value) 
							|| (this._League.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._League.Entity = null;
						previousValue.LeagueFields.Remove(this);
					}
					this._League.Entity = value;
					if ((value != null))
					{
						value.LeagueFields.Add(this);
						this._LeagueID = value.LeagueID;
					}
					else
					{
						this._LeagueID = default(int);
					}
					this.SendPropertyChanged("League");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
