//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WLQuickApps.FieldManager.Silverlight.SiteService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="LeagueItem", Namespace="http://schemas.datacontract.org/2004/07/WLQuickApps.FieldManager.WebSite")]
    public partial class LeagueItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescriptionField;
        
        private int LeagueIDField;
        
        private string TitleField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LeagueID {
            get {
                return this.LeagueIDField;
            }
            set {
                if ((this.LeagueIDField.Equals(value) != true)) {
                    this.LeagueIDField = value;
                    this.RaisePropertyChanged("LeagueID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="FieldItem", Namespace="http://schemas.datacontract.org/2004/07/WLQuickApps.FieldManager.WebSite")]
    public partial class FieldItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AddressField;
        
        private string DescriptionField;
        
        private int FieldIDField;
        
        private WLQuickApps.FieldManager.Silverlight.SiteService.Weather[] ForecastField;
        
        private bool IsOpenField;
        
        private double LatitudeField;
        
        private double LongitudeField;
        
        private int NumberOfFieldsField;
        
        private string ParkingLotField;
        
        private string PhoneNumberField;
        
        private string StatusField;
        
        private string TitleField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FieldID {
            get {
                return this.FieldIDField;
            }
            set {
                if ((this.FieldIDField.Equals(value) != true)) {
                    this.FieldIDField = value;
                    this.RaisePropertyChanged("FieldID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WLQuickApps.FieldManager.Silverlight.SiteService.Weather[] Forecast {
            get {
                return this.ForecastField;
            }
            set {
                if ((object.ReferenceEquals(this.ForecastField, value) != true)) {
                    this.ForecastField = value;
                    this.RaisePropertyChanged("Forecast");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsOpen {
            get {
                return this.IsOpenField;
            }
            set {
                if ((this.IsOpenField.Equals(value) != true)) {
                    this.IsOpenField = value;
                    this.RaisePropertyChanged("IsOpen");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfFields {
            get {
                return this.NumberOfFieldsField;
            }
            set {
                if ((this.NumberOfFieldsField.Equals(value) != true)) {
                    this.NumberOfFieldsField = value;
                    this.RaisePropertyChanged("NumberOfFields");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParkingLot {
            get {
                return this.ParkingLotField;
            }
            set {
                if ((object.ReferenceEquals(this.ParkingLotField, value) != true)) {
                    this.ParkingLotField = value;
                    this.RaisePropertyChanged("ParkingLot");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PhoneNumber {
            get {
                return this.PhoneNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneNumberField, value) != true)) {
                    this.PhoneNumberField = value;
                    this.RaisePropertyChanged("PhoneNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="Weather", Namespace="http://schemas.datacontract.org/2004/07/WLQuickApps.FieldManager.Business")]
    public partial class Weather : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DayField;
        
        private int MaxTemperatureField;
        
        private int MinTemperatureField;
        
        private string WeatherSummaryField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Day {
            get {
                return this.DayField;
            }
            set {
                if ((object.ReferenceEquals(this.DayField, value) != true)) {
                    this.DayField = value;
                    this.RaisePropertyChanged("Day");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MaxTemperature {
            get {
                return this.MaxTemperatureField;
            }
            set {
                if ((this.MaxTemperatureField.Equals(value) != true)) {
                    this.MaxTemperatureField = value;
                    this.RaisePropertyChanged("MaxTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MinTemperature {
            get {
                return this.MinTemperatureField;
            }
            set {
                if ((this.MinTemperatureField.Equals(value) != true)) {
                    this.MinTemperatureField = value;
                    this.RaisePropertyChanged("MinTemperature");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string WeatherSummary {
            get {
                return this.WeatherSummaryField;
            }
            set {
                if ((object.ReferenceEquals(this.WeatherSummaryField, value) != true)) {
                    this.WeatherSummaryField = value;
                    this.RaisePropertyChanged("WeatherSummary");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserItem", Namespace="http://schemas.datacontract.org/2004/07/WLQuickApps.FieldManager.WebSite")]
    public partial class UserItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DisplayNameField;
        
        private string MessengerPresenceIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessengerPresenceID {
            get {
                return this.MessengerPresenceIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MessengerPresenceIDField, value) != true)) {
                    this.MessengerPresenceIDField = value;
                    this.RaisePropertyChanged("MessengerPresenceID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.ServiceModel.ServiceContractAttribute(Namespace="WLQuickApps.FieldManager.WebSite")]
    public interface SiteService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/CreateLeague", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/CreateLeagueResponse")]
        System.IAsyncResult BeginCreateLeague(string title, string description, string type, System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem EndCreateLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/CreateField", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/CreateFieldResponse")]
        System.IAsyncResult BeginCreateField(string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, string status, System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem EndCreateField(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetLeague", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetLeagueResponse")]
        System.IAsyncResult BeginGetLeague(int leagueID, System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem EndGetLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetAllLeagues", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetAllLeaguesResponse")]
        System.IAsyncResult BeginGetAllLeagues(System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] EndGetAllLeagues(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetLeagues", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetLeaguesResponse")]
        System.IAsyncResult BeginGetLeagues(System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] EndGetLeagues(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetField", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetFieldResponse")]
        System.IAsyncResult BeginGetField(int fieldID, System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem EndGetField(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetWeather", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetWeatherResponse")]
        System.IAsyncResult BeginGetWeather(double latitude, double longitude, System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.Weather[] EndGetWeather(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/ChangeFieldStatus", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/ChangeFieldStatusResponse")]
        System.IAsyncResult BeginChangeFieldStatus(int fieldID, bool isOpen, string status, System.AsyncCallback callback, object asyncState);
        
        void EndChangeFieldStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetMyFields", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetMyFieldsResponse")]
        System.IAsyncResult BeginGetMyFields(System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] EndGetMyFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetFieldsForUser", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetFieldsForUserResponse")]
        System.IAsyncResult BeginGetFieldsForUser(int startRowIndex, int maximumRows, System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] EndGetFieldsForUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetFieldsForUserCount", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetFieldsForUserCountResponse")]
        System.IAsyncResult BeginGetFieldsForUserCount(System.AsyncCallback callback, object asyncState);
        
        int EndGetFieldsForUserCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetFieldsInRange", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetFieldsInRangeResponse")]
        System.IAsyncResult BeginGetFieldsInRange(double nLatitude, double sLatitude, double eLongitude, double wLongitude, System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] EndGetFieldsInRange(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetFieldsForLeague", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetFieldsForLeagueResponse")]
        System.IAsyncResult BeginGetFieldsForLeague(int leagueID, System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] EndGetFieldsForLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetUsersForLeague", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetUsersForLeagueResponse")]
        System.IAsyncResult BeginGetUsersForLeague(int leagueID, System.AsyncCallback callback, object asyncState);
        
        WLQuickApps.FieldManager.Silverlight.SiteService.UserItem[] EndGetUsersForLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetUserNameByEmail", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetUserNameByEmailResponse")]
        System.IAsyncResult BeginGetUserNameByEmail(string email, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserNameByEmail(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/GetDisplayName", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/GetDisplayNameResponse")]
        System.IAsyncResult BeginGetDisplayName(System.AsyncCallback callback, object asyncState);
        
        string EndGetDisplayName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/AddToMyFields", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/AddToMyFieldsResponse")]
        System.IAsyncResult BeginAddToMyFields(int fieldID, System.AsyncCallback callback, object asyncState);
        
        void EndAddToMyFields(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/AddToMyLeagues", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/AddToMyLeaguesResponse")]
        System.IAsyncResult BeginAddToMyLeagues(int leagueID, System.AsyncCallback callback, object asyncState);
        
        void EndAddToMyLeagues(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/AddFieldAdmin", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/AddFieldAdminResponse")]
        System.IAsyncResult BeginAddFieldAdmin(int fieldID, string userID, System.AsyncCallback callback, object asyncState);
        
        void EndAddFieldAdmin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/AddFieldToLeague", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/AddFieldToLeagueResponse")]
        System.IAsyncResult BeginAddFieldToLeague(int fieldID, int leagueID, System.AsyncCallback callback, object asyncState);
        
        void EndAddFieldToLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/UpdateLeague", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/UpdateLeagueResponse")]
        System.IAsyncResult BeginUpdateLeague(int leagueID, string title, string description, string type, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/UpdateField", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/UpdateFieldResponse")]
        System.IAsyncResult BeginUpdateField(int fieldID, string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, bool isOpen, string status, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateField(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/UpdateMessengerID", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/UpdateMessengerIDResponse")]
        System.IAsyncResult BeginUpdateMessengerID(string messengerPresenceID, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateMessengerID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/DeleteLeague", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/DeleteLeagueResponse")]
        System.IAsyncResult BeginDeleteLeague(int leagueID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/DeleteField", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/DeleteFieldResponse")]
        System.IAsyncResult BeginDeleteField(int fieldID, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteField(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/RemoveLeague", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/RemoveLeagueResponse")]
        System.IAsyncResult BeginRemoveLeague(int leagueID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveLeague(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="WLQuickApps.FieldManager.WebSite/SiteService/RemoveField", ReplyAction="WLQuickApps.FieldManager.WebSite/SiteService/RemoveFieldResponse")]
        System.IAsyncResult BeginRemoveField(int fieldID, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveField(System.IAsyncResult result);
    }
    
    public interface SiteServiceChannel : WLQuickApps.FieldManager.Silverlight.SiteService.SiteService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class CreateLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class CreateFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetAllLeaguesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetAllLeaguesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetLeaguesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLeaguesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetFieldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFieldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetWeatherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWeatherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.Weather[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.Weather[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetMyFieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMyFieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetFieldsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFieldsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetFieldsForUserCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFieldsForUserCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetFieldsInRangeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFieldsInRangeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetFieldsForLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFieldsForLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetUsersForLeagueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUsersForLeagueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WLQuickApps.FieldManager.Silverlight.SiteService.UserItem[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WLQuickApps.FieldManager.Silverlight.SiteService.UserItem[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetUserNameByEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserNameByEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class GetDisplayNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDisplayNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    public partial class SiteServiceClient : System.ServiceModel.ClientBase<WLQuickApps.FieldManager.Silverlight.SiteService.SiteService>, WLQuickApps.FieldManager.Silverlight.SiteService.SiteService {
        
        private BeginOperationDelegate onBeginCreateLeagueDelegate;
        
        private EndOperationDelegate onEndCreateLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onCreateLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateFieldDelegate;
        
        private EndOperationDelegate onEndCreateFieldDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFieldCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLeagueDelegate;
        
        private EndOperationDelegate onEndGetLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onGetLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetAllLeaguesDelegate;
        
        private EndOperationDelegate onEndGetAllLeaguesDelegate;
        
        private System.Threading.SendOrPostCallback onGetAllLeaguesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLeaguesDelegate;
        
        private EndOperationDelegate onEndGetLeaguesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLeaguesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFieldDelegate;
        
        private EndOperationDelegate onEndGetFieldDelegate;
        
        private System.Threading.SendOrPostCallback onGetFieldCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWeatherDelegate;
        
        private EndOperationDelegate onEndGetWeatherDelegate;
        
        private System.Threading.SendOrPostCallback onGetWeatherCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeFieldStatusDelegate;
        
        private EndOperationDelegate onEndChangeFieldStatusDelegate;
        
        private System.Threading.SendOrPostCallback onChangeFieldStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMyFieldsDelegate;
        
        private EndOperationDelegate onEndGetMyFieldsDelegate;
        
        private System.Threading.SendOrPostCallback onGetMyFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFieldsForUserDelegate;
        
        private EndOperationDelegate onEndGetFieldsForUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetFieldsForUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFieldsForUserCountDelegate;
        
        private EndOperationDelegate onEndGetFieldsForUserCountDelegate;
        
        private System.Threading.SendOrPostCallback onGetFieldsForUserCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFieldsInRangeDelegate;
        
        private EndOperationDelegate onEndGetFieldsInRangeDelegate;
        
        private System.Threading.SendOrPostCallback onGetFieldsInRangeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFieldsForLeagueDelegate;
        
        private EndOperationDelegate onEndGetFieldsForLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onGetFieldsForLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUsersForLeagueDelegate;
        
        private EndOperationDelegate onEndGetUsersForLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onGetUsersForLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserNameByEmailDelegate;
        
        private EndOperationDelegate onEndGetUserNameByEmailDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserNameByEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDisplayNameDelegate;
        
        private EndOperationDelegate onEndGetDisplayNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetDisplayNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddToMyFieldsDelegate;
        
        private EndOperationDelegate onEndAddToMyFieldsDelegate;
        
        private System.Threading.SendOrPostCallback onAddToMyFieldsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddToMyLeaguesDelegate;
        
        private EndOperationDelegate onEndAddToMyLeaguesDelegate;
        
        private System.Threading.SendOrPostCallback onAddToMyLeaguesCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFieldAdminDelegate;
        
        private EndOperationDelegate onEndAddFieldAdminDelegate;
        
        private System.Threading.SendOrPostCallback onAddFieldAdminCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddFieldToLeagueDelegate;
        
        private EndOperationDelegate onEndAddFieldToLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onAddFieldToLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateLeagueDelegate;
        
        private EndOperationDelegate onEndUpdateLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateFieldDelegate;
        
        private EndOperationDelegate onEndUpdateFieldDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateFieldCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateMessengerIDDelegate;
        
        private EndOperationDelegate onEndUpdateMessengerIDDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateMessengerIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteLeagueDelegate;
        
        private EndOperationDelegate onEndDeleteLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFieldDelegate;
        
        private EndOperationDelegate onEndDeleteFieldDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFieldCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveLeagueDelegate;
        
        private EndOperationDelegate onEndRemoveLeagueDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveLeagueCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveFieldDelegate;
        
        private EndOperationDelegate onEndRemoveFieldDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveFieldCompletedDelegate;
        
        private static System.ServiceModel.Channels.Binding defaultBinding = new System.ServiceModel.BasicHttpBinding();
        
        private static System.ServiceModel.EndpointAddress defaultAddress = new System.ServiceModel.EndpointAddress("http://fieldmanager.local.com/SiteService.svc/soap");
        
        public SiteServiceClient() : 
                this(defaultBinding, defaultAddress) {
        }
        
        public SiteServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<CreateLeagueCompletedEventArgs> CreateLeagueCompleted;
        
        public event System.EventHandler<CreateFieldCompletedEventArgs> CreateFieldCompleted;
        
        public event System.EventHandler<GetLeagueCompletedEventArgs> GetLeagueCompleted;
        
        public event System.EventHandler<GetAllLeaguesCompletedEventArgs> GetAllLeaguesCompleted;
        
        public event System.EventHandler<GetLeaguesCompletedEventArgs> GetLeaguesCompleted;
        
        public event System.EventHandler<GetFieldCompletedEventArgs> GetFieldCompleted;
        
        public event System.EventHandler<GetWeatherCompletedEventArgs> GetWeatherCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ChangeFieldStatusCompleted;
        
        public event System.EventHandler<GetMyFieldsCompletedEventArgs> GetMyFieldsCompleted;
        
        public event System.EventHandler<GetFieldsForUserCompletedEventArgs> GetFieldsForUserCompleted;
        
        public event System.EventHandler<GetFieldsForUserCountCompletedEventArgs> GetFieldsForUserCountCompleted;
        
        public event System.EventHandler<GetFieldsInRangeCompletedEventArgs> GetFieldsInRangeCompleted;
        
        public event System.EventHandler<GetFieldsForLeagueCompletedEventArgs> GetFieldsForLeagueCompleted;
        
        public event System.EventHandler<GetUsersForLeagueCompletedEventArgs> GetUsersForLeagueCompleted;
        
        public event System.EventHandler<GetUserNameByEmailCompletedEventArgs> GetUserNameByEmailCompleted;
        
        public event System.EventHandler<GetDisplayNameCompletedEventArgs> GetDisplayNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddToMyFieldsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddToMyLeaguesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddFieldAdminCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddFieldToLeagueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateLeagueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateFieldCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateMessengerIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteLeagueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteFieldCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveLeagueCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> RemoveFieldCompleted;
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginCreateLeague(string title, string description, string type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateLeague(title, description, type, callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndCreateLeague(System.IAsyncResult result) {
            return base.Channel.EndCreateLeague(result);
        }
        
        private System.IAsyncResult OnBeginCreateLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string title = ((string)(inValues[0]));
            string description = ((string)(inValues[1]));
            string type = ((string)(inValues[2]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginCreateLeague(title, description, type, callback, asyncState);
        }
        
        private object[] OnEndCreateLeague(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndCreateLeague(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateLeagueCompleted(object state) {
            if ((this.CreateLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateLeagueCompleted(this, new CreateLeagueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateLeagueAsync(string title, string description, string type) {
            this.CreateLeagueAsync(title, description, type, null);
        }
        
        public void CreateLeagueAsync(string title, string description, string type, object userState) {
            if ((this.onBeginCreateLeagueDelegate == null)) {
                this.onBeginCreateLeagueDelegate = new BeginOperationDelegate(this.OnBeginCreateLeague);
            }
            if ((this.onEndCreateLeagueDelegate == null)) {
                this.onEndCreateLeagueDelegate = new EndOperationDelegate(this.OnEndCreateLeague);
            }
            if ((this.onCreateLeagueCompletedDelegate == null)) {
                this.onCreateLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginCreateLeagueDelegate, new object[] {
                        title,
                        description,
                        type}, this.onEndCreateLeagueDelegate, this.onCreateLeagueCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginCreateField(string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, string status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateField(title, description, address, latitude, longitude, numberOfFields, parkingLot, phoneNumber, status, callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndCreateField(System.IAsyncResult result) {
            return base.Channel.EndCreateField(result);
        }
        
        private System.IAsyncResult OnBeginCreateField(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string title = ((string)(inValues[0]));
            string description = ((string)(inValues[1]));
            string address = ((string)(inValues[2]));
            double latitude = ((double)(inValues[3]));
            double longitude = ((double)(inValues[4]));
            int numberOfFields = ((int)(inValues[5]));
            string parkingLot = ((string)(inValues[6]));
            string phoneNumber = ((string)(inValues[7]));
            string status = ((string)(inValues[8]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginCreateField(title, description, address, latitude, longitude, numberOfFields, parkingLot, phoneNumber, status, callback, asyncState);
        }
        
        private object[] OnEndCreateField(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndCreateField(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateFieldCompleted(object state) {
            if ((this.CreateFieldCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFieldCompleted(this, new CreateFieldCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFieldAsync(string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, string status) {
            this.CreateFieldAsync(title, description, address, latitude, longitude, numberOfFields, parkingLot, phoneNumber, status, null);
        }
        
        public void CreateFieldAsync(string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, string status, object userState) {
            if ((this.onBeginCreateFieldDelegate == null)) {
                this.onBeginCreateFieldDelegate = new BeginOperationDelegate(this.OnBeginCreateField);
            }
            if ((this.onEndCreateFieldDelegate == null)) {
                this.onEndCreateFieldDelegate = new EndOperationDelegate(this.OnEndCreateField);
            }
            if ((this.onCreateFieldCompletedDelegate == null)) {
                this.onCreateFieldCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFieldCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFieldDelegate, new object[] {
                        title,
                        description,
                        address,
                        latitude,
                        longitude,
                        numberOfFields,
                        parkingLot,
                        phoneNumber,
                        status}, this.onEndCreateFieldDelegate, this.onCreateFieldCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLeague(leagueID, callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetLeague(System.IAsyncResult result) {
            return base.Channel.EndGetLeague(result);
        }
        
        private System.IAsyncResult OnBeginGetLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int leagueID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetLeague(leagueID, callback, asyncState);
        }
        
        private object[] OnEndGetLeague(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetLeague(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLeagueCompleted(object state) {
            if ((this.GetLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLeagueCompleted(this, new GetLeagueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLeagueAsync(int leagueID) {
            this.GetLeagueAsync(leagueID, null);
        }
        
        public void GetLeagueAsync(int leagueID, object userState) {
            if ((this.onBeginGetLeagueDelegate == null)) {
                this.onBeginGetLeagueDelegate = new BeginOperationDelegate(this.OnBeginGetLeague);
            }
            if ((this.onEndGetLeagueDelegate == null)) {
                this.onEndGetLeagueDelegate = new EndOperationDelegate(this.OnEndGetLeague);
            }
            if ((this.onGetLeagueCompletedDelegate == null)) {
                this.onGetLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginGetLeagueDelegate, new object[] {
                        leagueID}, this.onEndGetLeagueDelegate, this.onGetLeagueCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetAllLeagues(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetAllLeagues(callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetAllLeagues(System.IAsyncResult result) {
            return base.Channel.EndGetAllLeagues(result);
        }
        
        private System.IAsyncResult OnBeginGetAllLeagues(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetAllLeagues(callback, asyncState);
        }
        
        private object[] OnEndGetAllLeagues(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetAllLeagues(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetAllLeaguesCompleted(object state) {
            if ((this.GetAllLeaguesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetAllLeaguesCompleted(this, new GetAllLeaguesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetAllLeaguesAsync() {
            this.GetAllLeaguesAsync(null);
        }
        
        public void GetAllLeaguesAsync(object userState) {
            if ((this.onBeginGetAllLeaguesDelegate == null)) {
                this.onBeginGetAllLeaguesDelegate = new BeginOperationDelegate(this.OnBeginGetAllLeagues);
            }
            if ((this.onEndGetAllLeaguesDelegate == null)) {
                this.onEndGetAllLeaguesDelegate = new EndOperationDelegate(this.OnEndGetAllLeagues);
            }
            if ((this.onGetAllLeaguesCompletedDelegate == null)) {
                this.onGetAllLeaguesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetAllLeaguesCompleted);
            }
            base.InvokeAsync(this.onBeginGetAllLeaguesDelegate, null, this.onEndGetAllLeaguesDelegate, this.onGetAllLeaguesCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetLeagues(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLeagues(callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetLeagues(System.IAsyncResult result) {
            return base.Channel.EndGetLeagues(result);
        }
        
        private System.IAsyncResult OnBeginGetLeagues(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetLeagues(callback, asyncState);
        }
        
        private object[] OnEndGetLeagues(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetLeagues(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLeaguesCompleted(object state) {
            if ((this.GetLeaguesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLeaguesCompleted(this, new GetLeaguesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLeaguesAsync() {
            this.GetLeaguesAsync(null);
        }
        
        public void GetLeaguesAsync(object userState) {
            if ((this.onBeginGetLeaguesDelegate == null)) {
                this.onBeginGetLeaguesDelegate = new BeginOperationDelegate(this.OnBeginGetLeagues);
            }
            if ((this.onEndGetLeaguesDelegate == null)) {
                this.onEndGetLeaguesDelegate = new EndOperationDelegate(this.OnEndGetLeagues);
            }
            if ((this.onGetLeaguesCompletedDelegate == null)) {
                this.onGetLeaguesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLeaguesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLeaguesDelegate, null, this.onEndGetLeaguesDelegate, this.onGetLeaguesCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetField(int fieldID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetField(fieldID, callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetField(System.IAsyncResult result) {
            return base.Channel.EndGetField(result);
        }
        
        private System.IAsyncResult OnBeginGetField(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int fieldID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetField(fieldID, callback, asyncState);
        }
        
        private object[] OnEndGetField(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetField(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFieldCompleted(object state) {
            if ((this.GetFieldCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFieldCompleted(this, new GetFieldCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFieldAsync(int fieldID) {
            this.GetFieldAsync(fieldID, null);
        }
        
        public void GetFieldAsync(int fieldID, object userState) {
            if ((this.onBeginGetFieldDelegate == null)) {
                this.onBeginGetFieldDelegate = new BeginOperationDelegate(this.OnBeginGetField);
            }
            if ((this.onEndGetFieldDelegate == null)) {
                this.onEndGetFieldDelegate = new EndOperationDelegate(this.OnEndGetField);
            }
            if ((this.onGetFieldCompletedDelegate == null)) {
                this.onGetFieldCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFieldCompleted);
            }
            base.InvokeAsync(this.onBeginGetFieldDelegate, new object[] {
                        fieldID}, this.onEndGetFieldDelegate, this.onGetFieldCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetWeather(double latitude, double longitude, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWeather(latitude, longitude, callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.Weather[] WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetWeather(System.IAsyncResult result) {
            return base.Channel.EndGetWeather(result);
        }
        
        private System.IAsyncResult OnBeginGetWeather(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double latitude = ((double)(inValues[0]));
            double longitude = ((double)(inValues[1]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetWeather(latitude, longitude, callback, asyncState);
        }
        
        private object[] OnEndGetWeather(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.Weather[] retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetWeather(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWeatherCompleted(object state) {
            if ((this.GetWeatherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWeatherCompleted(this, new GetWeatherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWeatherAsync(double latitude, double longitude) {
            this.GetWeatherAsync(latitude, longitude, null);
        }
        
        public void GetWeatherAsync(double latitude, double longitude, object userState) {
            if ((this.onBeginGetWeatherDelegate == null)) {
                this.onBeginGetWeatherDelegate = new BeginOperationDelegate(this.OnBeginGetWeather);
            }
            if ((this.onEndGetWeatherDelegate == null)) {
                this.onEndGetWeatherDelegate = new EndOperationDelegate(this.OnEndGetWeather);
            }
            if ((this.onGetWeatherCompletedDelegate == null)) {
                this.onGetWeatherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWeatherCompleted);
            }
            base.InvokeAsync(this.onBeginGetWeatherDelegate, new object[] {
                        latitude,
                        longitude}, this.onEndGetWeatherDelegate, this.onGetWeatherCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginChangeFieldStatus(int fieldID, bool isOpen, string status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeFieldStatus(fieldID, isOpen, status, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndChangeFieldStatus(System.IAsyncResult result) {
            base.Channel.EndChangeFieldStatus(result);
        }
        
        private System.IAsyncResult OnBeginChangeFieldStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int fieldID = ((int)(inValues[0]));
            bool isOpen = ((bool)(inValues[1]));
            string status = ((string)(inValues[2]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginChangeFieldStatus(fieldID, isOpen, status, callback, asyncState);
        }
        
        private object[] OnEndChangeFieldStatus(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndChangeFieldStatus(result);
            return null;
        }
        
        private void OnChangeFieldStatusCompleted(object state) {
            if ((this.ChangeFieldStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeFieldStatusCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeFieldStatusAsync(int fieldID, bool isOpen, string status) {
            this.ChangeFieldStatusAsync(fieldID, isOpen, status, null);
        }
        
        public void ChangeFieldStatusAsync(int fieldID, bool isOpen, string status, object userState) {
            if ((this.onBeginChangeFieldStatusDelegate == null)) {
                this.onBeginChangeFieldStatusDelegate = new BeginOperationDelegate(this.OnBeginChangeFieldStatus);
            }
            if ((this.onEndChangeFieldStatusDelegate == null)) {
                this.onEndChangeFieldStatusDelegate = new EndOperationDelegate(this.OnEndChangeFieldStatus);
            }
            if ((this.onChangeFieldStatusCompletedDelegate == null)) {
                this.onChangeFieldStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeFieldStatusCompleted);
            }
            base.InvokeAsync(this.onBeginChangeFieldStatusDelegate, new object[] {
                        fieldID,
                        isOpen,
                        status}, this.onEndChangeFieldStatusDelegate, this.onChangeFieldStatusCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetMyFields(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMyFields(callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetMyFields(System.IAsyncResult result) {
            return base.Channel.EndGetMyFields(result);
        }
        
        private System.IAsyncResult OnBeginGetMyFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetMyFields(callback, asyncState);
        }
        
        private object[] OnEndGetMyFields(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetMyFields(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMyFieldsCompleted(object state) {
            if ((this.GetMyFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMyFieldsCompleted(this, new GetMyFieldsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMyFieldsAsync() {
            this.GetMyFieldsAsync(null);
        }
        
        public void GetMyFieldsAsync(object userState) {
            if ((this.onBeginGetMyFieldsDelegate == null)) {
                this.onBeginGetMyFieldsDelegate = new BeginOperationDelegate(this.OnBeginGetMyFields);
            }
            if ((this.onEndGetMyFieldsDelegate == null)) {
                this.onEndGetMyFieldsDelegate = new EndOperationDelegate(this.OnEndGetMyFields);
            }
            if ((this.onGetMyFieldsCompletedDelegate == null)) {
                this.onGetMyFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMyFieldsCompleted);
            }
            base.InvokeAsync(this.onBeginGetMyFieldsDelegate, null, this.onEndGetMyFieldsDelegate, this.onGetMyFieldsCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetFieldsForUser(int startRowIndex, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFieldsForUser(startRowIndex, maximumRows, callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetFieldsForUser(System.IAsyncResult result) {
            return base.Channel.EndGetFieldsForUser(result);
        }
        
        private System.IAsyncResult OnBeginGetFieldsForUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int startRowIndex = ((int)(inValues[0]));
            int maximumRows = ((int)(inValues[1]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetFieldsForUser(startRowIndex, maximumRows, callback, asyncState);
        }
        
        private object[] OnEndGetFieldsForUser(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetFieldsForUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFieldsForUserCompleted(object state) {
            if ((this.GetFieldsForUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFieldsForUserCompleted(this, new GetFieldsForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFieldsForUserAsync(int startRowIndex, int maximumRows) {
            this.GetFieldsForUserAsync(startRowIndex, maximumRows, null);
        }
        
        public void GetFieldsForUserAsync(int startRowIndex, int maximumRows, object userState) {
            if ((this.onBeginGetFieldsForUserDelegate == null)) {
                this.onBeginGetFieldsForUserDelegate = new BeginOperationDelegate(this.OnBeginGetFieldsForUser);
            }
            if ((this.onEndGetFieldsForUserDelegate == null)) {
                this.onEndGetFieldsForUserDelegate = new EndOperationDelegate(this.OnEndGetFieldsForUser);
            }
            if ((this.onGetFieldsForUserCompletedDelegate == null)) {
                this.onGetFieldsForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFieldsForUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetFieldsForUserDelegate, new object[] {
                        startRowIndex,
                        maximumRows}, this.onEndGetFieldsForUserDelegate, this.onGetFieldsForUserCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetFieldsForUserCount(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFieldsForUserCount(callback, asyncState);
        }
        
        int WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetFieldsForUserCount(System.IAsyncResult result) {
            return base.Channel.EndGetFieldsForUserCount(result);
        }
        
        private System.IAsyncResult OnBeginGetFieldsForUserCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetFieldsForUserCount(callback, asyncState);
        }
        
        private object[] OnEndGetFieldsForUserCount(System.IAsyncResult result) {
            int retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetFieldsForUserCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFieldsForUserCountCompleted(object state) {
            if ((this.GetFieldsForUserCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFieldsForUserCountCompleted(this, new GetFieldsForUserCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFieldsForUserCountAsync() {
            this.GetFieldsForUserCountAsync(null);
        }
        
        public void GetFieldsForUserCountAsync(object userState) {
            if ((this.onBeginGetFieldsForUserCountDelegate == null)) {
                this.onBeginGetFieldsForUserCountDelegate = new BeginOperationDelegate(this.OnBeginGetFieldsForUserCount);
            }
            if ((this.onEndGetFieldsForUserCountDelegate == null)) {
                this.onEndGetFieldsForUserCountDelegate = new EndOperationDelegate(this.OnEndGetFieldsForUserCount);
            }
            if ((this.onGetFieldsForUserCountCompletedDelegate == null)) {
                this.onGetFieldsForUserCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFieldsForUserCountCompleted);
            }
            base.InvokeAsync(this.onBeginGetFieldsForUserCountDelegate, null, this.onEndGetFieldsForUserCountDelegate, this.onGetFieldsForUserCountCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetFieldsInRange(double nLatitude, double sLatitude, double eLongitude, double wLongitude, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFieldsInRange(nLatitude, sLatitude, eLongitude, wLongitude, callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetFieldsInRange(System.IAsyncResult result) {
            return base.Channel.EndGetFieldsInRange(result);
        }
        
        private System.IAsyncResult OnBeginGetFieldsInRange(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double nLatitude = ((double)(inValues[0]));
            double sLatitude = ((double)(inValues[1]));
            double eLongitude = ((double)(inValues[2]));
            double wLongitude = ((double)(inValues[3]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetFieldsInRange(nLatitude, sLatitude, eLongitude, wLongitude, callback, asyncState);
        }
        
        private object[] OnEndGetFieldsInRange(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetFieldsInRange(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFieldsInRangeCompleted(object state) {
            if ((this.GetFieldsInRangeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFieldsInRangeCompleted(this, new GetFieldsInRangeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFieldsInRangeAsync(double nLatitude, double sLatitude, double eLongitude, double wLongitude) {
            this.GetFieldsInRangeAsync(nLatitude, sLatitude, eLongitude, wLongitude, null);
        }
        
        public void GetFieldsInRangeAsync(double nLatitude, double sLatitude, double eLongitude, double wLongitude, object userState) {
            if ((this.onBeginGetFieldsInRangeDelegate == null)) {
                this.onBeginGetFieldsInRangeDelegate = new BeginOperationDelegate(this.OnBeginGetFieldsInRange);
            }
            if ((this.onEndGetFieldsInRangeDelegate == null)) {
                this.onEndGetFieldsInRangeDelegate = new EndOperationDelegate(this.OnEndGetFieldsInRange);
            }
            if ((this.onGetFieldsInRangeCompletedDelegate == null)) {
                this.onGetFieldsInRangeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFieldsInRangeCompleted);
            }
            base.InvokeAsync(this.onBeginGetFieldsInRangeDelegate, new object[] {
                        nLatitude,
                        sLatitude,
                        eLongitude,
                        wLongitude}, this.onEndGetFieldsInRangeDelegate, this.onGetFieldsInRangeCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetFieldsForLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFieldsForLeague(leagueID, callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetFieldsForLeague(System.IAsyncResult result) {
            return base.Channel.EndGetFieldsForLeague(result);
        }
        
        private System.IAsyncResult OnBeginGetFieldsForLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int leagueID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetFieldsForLeague(leagueID, callback, asyncState);
        }
        
        private object[] OnEndGetFieldsForLeague(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetFieldsForLeague(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFieldsForLeagueCompleted(object state) {
            if ((this.GetFieldsForLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFieldsForLeagueCompleted(this, new GetFieldsForLeagueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFieldsForLeagueAsync(int leagueID) {
            this.GetFieldsForLeagueAsync(leagueID, null);
        }
        
        public void GetFieldsForLeagueAsync(int leagueID, object userState) {
            if ((this.onBeginGetFieldsForLeagueDelegate == null)) {
                this.onBeginGetFieldsForLeagueDelegate = new BeginOperationDelegate(this.OnBeginGetFieldsForLeague);
            }
            if ((this.onEndGetFieldsForLeagueDelegate == null)) {
                this.onEndGetFieldsForLeagueDelegate = new EndOperationDelegate(this.OnEndGetFieldsForLeague);
            }
            if ((this.onGetFieldsForLeagueCompletedDelegate == null)) {
                this.onGetFieldsForLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFieldsForLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginGetFieldsForLeagueDelegate, new object[] {
                        leagueID}, this.onEndGetFieldsForLeagueDelegate, this.onGetFieldsForLeagueCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetUsersForLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUsersForLeague(leagueID, callback, asyncState);
        }
        
        WLQuickApps.FieldManager.Silverlight.SiteService.UserItem[] WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetUsersForLeague(System.IAsyncResult result) {
            return base.Channel.EndGetUsersForLeague(result);
        }
        
        private System.IAsyncResult OnBeginGetUsersForLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int leagueID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetUsersForLeague(leagueID, callback, asyncState);
        }
        
        private object[] OnEndGetUsersForLeague(System.IAsyncResult result) {
            WLQuickApps.FieldManager.Silverlight.SiteService.UserItem[] retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetUsersForLeague(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUsersForLeagueCompleted(object state) {
            if ((this.GetUsersForLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUsersForLeagueCompleted(this, new GetUsersForLeagueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUsersForLeagueAsync(int leagueID) {
            this.GetUsersForLeagueAsync(leagueID, null);
        }
        
        public void GetUsersForLeagueAsync(int leagueID, object userState) {
            if ((this.onBeginGetUsersForLeagueDelegate == null)) {
                this.onBeginGetUsersForLeagueDelegate = new BeginOperationDelegate(this.OnBeginGetUsersForLeague);
            }
            if ((this.onEndGetUsersForLeagueDelegate == null)) {
                this.onEndGetUsersForLeagueDelegate = new EndOperationDelegate(this.OnEndGetUsersForLeague);
            }
            if ((this.onGetUsersForLeagueCompletedDelegate == null)) {
                this.onGetUsersForLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUsersForLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginGetUsersForLeagueDelegate, new object[] {
                        leagueID}, this.onEndGetUsersForLeagueDelegate, this.onGetUsersForLeagueCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetUserNameByEmail(string email, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserNameByEmail(email, callback, asyncState);
        }
        
        string WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetUserNameByEmail(System.IAsyncResult result) {
            return base.Channel.EndGetUserNameByEmail(result);
        }
        
        private System.IAsyncResult OnBeginGetUserNameByEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string email = ((string)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetUserNameByEmail(email, callback, asyncState);
        }
        
        private object[] OnEndGetUserNameByEmail(System.IAsyncResult result) {
            string retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetUserNameByEmail(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserNameByEmailCompleted(object state) {
            if ((this.GetUserNameByEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserNameByEmailCompleted(this, new GetUserNameByEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserNameByEmailAsync(string email) {
            this.GetUserNameByEmailAsync(email, null);
        }
        
        public void GetUserNameByEmailAsync(string email, object userState) {
            if ((this.onBeginGetUserNameByEmailDelegate == null)) {
                this.onBeginGetUserNameByEmailDelegate = new BeginOperationDelegate(this.OnBeginGetUserNameByEmail);
            }
            if ((this.onEndGetUserNameByEmailDelegate == null)) {
                this.onEndGetUserNameByEmailDelegate = new EndOperationDelegate(this.OnEndGetUserNameByEmail);
            }
            if ((this.onGetUserNameByEmailCompletedDelegate == null)) {
                this.onGetUserNameByEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserNameByEmailCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserNameByEmailDelegate, new object[] {
                        email}, this.onEndGetUserNameByEmailDelegate, this.onGetUserNameByEmailCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginGetDisplayName(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDisplayName(callback, asyncState);
        }
        
        string WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndGetDisplayName(System.IAsyncResult result) {
            return base.Channel.EndGetDisplayName(result);
        }
        
        private System.IAsyncResult OnBeginGetDisplayName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginGetDisplayName(callback, asyncState);
        }
        
        private object[] OnEndGetDisplayName(System.IAsyncResult result) {
            string retVal = ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndGetDisplayName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDisplayNameCompleted(object state) {
            if ((this.GetDisplayNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDisplayNameCompleted(this, new GetDisplayNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDisplayNameAsync() {
            this.GetDisplayNameAsync(null);
        }
        
        public void GetDisplayNameAsync(object userState) {
            if ((this.onBeginGetDisplayNameDelegate == null)) {
                this.onBeginGetDisplayNameDelegate = new BeginOperationDelegate(this.OnBeginGetDisplayName);
            }
            if ((this.onEndGetDisplayNameDelegate == null)) {
                this.onEndGetDisplayNameDelegate = new EndOperationDelegate(this.OnEndGetDisplayName);
            }
            if ((this.onGetDisplayNameCompletedDelegate == null)) {
                this.onGetDisplayNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDisplayNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetDisplayNameDelegate, null, this.onEndGetDisplayNameDelegate, this.onGetDisplayNameCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginAddToMyFields(int fieldID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddToMyFields(fieldID, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndAddToMyFields(System.IAsyncResult result) {
            base.Channel.EndAddToMyFields(result);
        }
        
        private System.IAsyncResult OnBeginAddToMyFields(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int fieldID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginAddToMyFields(fieldID, callback, asyncState);
        }
        
        private object[] OnEndAddToMyFields(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndAddToMyFields(result);
            return null;
        }
        
        private void OnAddToMyFieldsCompleted(object state) {
            if ((this.AddToMyFieldsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddToMyFieldsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddToMyFieldsAsync(int fieldID) {
            this.AddToMyFieldsAsync(fieldID, null);
        }
        
        public void AddToMyFieldsAsync(int fieldID, object userState) {
            if ((this.onBeginAddToMyFieldsDelegate == null)) {
                this.onBeginAddToMyFieldsDelegate = new BeginOperationDelegate(this.OnBeginAddToMyFields);
            }
            if ((this.onEndAddToMyFieldsDelegate == null)) {
                this.onEndAddToMyFieldsDelegate = new EndOperationDelegate(this.OnEndAddToMyFields);
            }
            if ((this.onAddToMyFieldsCompletedDelegate == null)) {
                this.onAddToMyFieldsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddToMyFieldsCompleted);
            }
            base.InvokeAsync(this.onBeginAddToMyFieldsDelegate, new object[] {
                        fieldID}, this.onEndAddToMyFieldsDelegate, this.onAddToMyFieldsCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginAddToMyLeagues(int leagueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddToMyLeagues(leagueID, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndAddToMyLeagues(System.IAsyncResult result) {
            base.Channel.EndAddToMyLeagues(result);
        }
        
        private System.IAsyncResult OnBeginAddToMyLeagues(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int leagueID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginAddToMyLeagues(leagueID, callback, asyncState);
        }
        
        private object[] OnEndAddToMyLeagues(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndAddToMyLeagues(result);
            return null;
        }
        
        private void OnAddToMyLeaguesCompleted(object state) {
            if ((this.AddToMyLeaguesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddToMyLeaguesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddToMyLeaguesAsync(int leagueID) {
            this.AddToMyLeaguesAsync(leagueID, null);
        }
        
        public void AddToMyLeaguesAsync(int leagueID, object userState) {
            if ((this.onBeginAddToMyLeaguesDelegate == null)) {
                this.onBeginAddToMyLeaguesDelegate = new BeginOperationDelegate(this.OnBeginAddToMyLeagues);
            }
            if ((this.onEndAddToMyLeaguesDelegate == null)) {
                this.onEndAddToMyLeaguesDelegate = new EndOperationDelegate(this.OnEndAddToMyLeagues);
            }
            if ((this.onAddToMyLeaguesCompletedDelegate == null)) {
                this.onAddToMyLeaguesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddToMyLeaguesCompleted);
            }
            base.InvokeAsync(this.onBeginAddToMyLeaguesDelegate, new object[] {
                        leagueID}, this.onEndAddToMyLeaguesDelegate, this.onAddToMyLeaguesCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginAddFieldAdmin(int fieldID, string userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFieldAdmin(fieldID, userID, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndAddFieldAdmin(System.IAsyncResult result) {
            base.Channel.EndAddFieldAdmin(result);
        }
        
        private System.IAsyncResult OnBeginAddFieldAdmin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int fieldID = ((int)(inValues[0]));
            string userID = ((string)(inValues[1]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginAddFieldAdmin(fieldID, userID, callback, asyncState);
        }
        
        private object[] OnEndAddFieldAdmin(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndAddFieldAdmin(result);
            return null;
        }
        
        private void OnAddFieldAdminCompleted(object state) {
            if ((this.AddFieldAdminCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFieldAdminCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFieldAdminAsync(int fieldID, string userID) {
            this.AddFieldAdminAsync(fieldID, userID, null);
        }
        
        public void AddFieldAdminAsync(int fieldID, string userID, object userState) {
            if ((this.onBeginAddFieldAdminDelegate == null)) {
                this.onBeginAddFieldAdminDelegate = new BeginOperationDelegate(this.OnBeginAddFieldAdmin);
            }
            if ((this.onEndAddFieldAdminDelegate == null)) {
                this.onEndAddFieldAdminDelegate = new EndOperationDelegate(this.OnEndAddFieldAdmin);
            }
            if ((this.onAddFieldAdminCompletedDelegate == null)) {
                this.onAddFieldAdminCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFieldAdminCompleted);
            }
            base.InvokeAsync(this.onBeginAddFieldAdminDelegate, new object[] {
                        fieldID,
                        userID}, this.onEndAddFieldAdminDelegate, this.onAddFieldAdminCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginAddFieldToLeague(int fieldID, int leagueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddFieldToLeague(fieldID, leagueID, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndAddFieldToLeague(System.IAsyncResult result) {
            base.Channel.EndAddFieldToLeague(result);
        }
        
        private System.IAsyncResult OnBeginAddFieldToLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int fieldID = ((int)(inValues[0]));
            int leagueID = ((int)(inValues[1]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginAddFieldToLeague(fieldID, leagueID, callback, asyncState);
        }
        
        private object[] OnEndAddFieldToLeague(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndAddFieldToLeague(result);
            return null;
        }
        
        private void OnAddFieldToLeagueCompleted(object state) {
            if ((this.AddFieldToLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddFieldToLeagueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddFieldToLeagueAsync(int fieldID, int leagueID) {
            this.AddFieldToLeagueAsync(fieldID, leagueID, null);
        }
        
        public void AddFieldToLeagueAsync(int fieldID, int leagueID, object userState) {
            if ((this.onBeginAddFieldToLeagueDelegate == null)) {
                this.onBeginAddFieldToLeagueDelegate = new BeginOperationDelegate(this.OnBeginAddFieldToLeague);
            }
            if ((this.onEndAddFieldToLeagueDelegate == null)) {
                this.onEndAddFieldToLeagueDelegate = new EndOperationDelegate(this.OnEndAddFieldToLeague);
            }
            if ((this.onAddFieldToLeagueCompletedDelegate == null)) {
                this.onAddFieldToLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddFieldToLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginAddFieldToLeagueDelegate, new object[] {
                        fieldID,
                        leagueID}, this.onEndAddFieldToLeagueDelegate, this.onAddFieldToLeagueCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginUpdateLeague(int leagueID, string title, string description, string type, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateLeague(leagueID, title, description, type, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndUpdateLeague(System.IAsyncResult result) {
            base.Channel.EndUpdateLeague(result);
        }
        
        private System.IAsyncResult OnBeginUpdateLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int leagueID = ((int)(inValues[0]));
            string title = ((string)(inValues[1]));
            string description = ((string)(inValues[2]));
            string type = ((string)(inValues[3]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginUpdateLeague(leagueID, title, description, type, callback, asyncState);
        }
        
        private object[] OnEndUpdateLeague(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndUpdateLeague(result);
            return null;
        }
        
        private void OnUpdateLeagueCompleted(object state) {
            if ((this.UpdateLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateLeagueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateLeagueAsync(int leagueID, string title, string description, string type) {
            this.UpdateLeagueAsync(leagueID, title, description, type, null);
        }
        
        public void UpdateLeagueAsync(int leagueID, string title, string description, string type, object userState) {
            if ((this.onBeginUpdateLeagueDelegate == null)) {
                this.onBeginUpdateLeagueDelegate = new BeginOperationDelegate(this.OnBeginUpdateLeague);
            }
            if ((this.onEndUpdateLeagueDelegate == null)) {
                this.onEndUpdateLeagueDelegate = new EndOperationDelegate(this.OnEndUpdateLeague);
            }
            if ((this.onUpdateLeagueCompletedDelegate == null)) {
                this.onUpdateLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateLeagueDelegate, new object[] {
                        leagueID,
                        title,
                        description,
                        type}, this.onEndUpdateLeagueDelegate, this.onUpdateLeagueCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginUpdateField(int fieldID, string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, bool isOpen, string status, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateField(fieldID, title, description, address, latitude, longitude, numberOfFields, parkingLot, phoneNumber, isOpen, status, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndUpdateField(System.IAsyncResult result) {
            base.Channel.EndUpdateField(result);
        }
        
        private System.IAsyncResult OnBeginUpdateField(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int fieldID = ((int)(inValues[0]));
            string title = ((string)(inValues[1]));
            string description = ((string)(inValues[2]));
            string address = ((string)(inValues[3]));
            double latitude = ((double)(inValues[4]));
            double longitude = ((double)(inValues[5]));
            int numberOfFields = ((int)(inValues[6]));
            string parkingLot = ((string)(inValues[7]));
            string phoneNumber = ((string)(inValues[8]));
            bool isOpen = ((bool)(inValues[9]));
            string status = ((string)(inValues[10]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginUpdateField(fieldID, title, description, address, latitude, longitude, numberOfFields, parkingLot, phoneNumber, isOpen, status, callback, asyncState);
        }
        
        private object[] OnEndUpdateField(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndUpdateField(result);
            return null;
        }
        
        private void OnUpdateFieldCompleted(object state) {
            if ((this.UpdateFieldCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateFieldCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateFieldAsync(int fieldID, string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, bool isOpen, string status) {
            this.UpdateFieldAsync(fieldID, title, description, address, latitude, longitude, numberOfFields, parkingLot, phoneNumber, isOpen, status, null);
        }
        
        public void UpdateFieldAsync(int fieldID, string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, bool isOpen, string status, object userState) {
            if ((this.onBeginUpdateFieldDelegate == null)) {
                this.onBeginUpdateFieldDelegate = new BeginOperationDelegate(this.OnBeginUpdateField);
            }
            if ((this.onEndUpdateFieldDelegate == null)) {
                this.onEndUpdateFieldDelegate = new EndOperationDelegate(this.OnEndUpdateField);
            }
            if ((this.onUpdateFieldCompletedDelegate == null)) {
                this.onUpdateFieldCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateFieldCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateFieldDelegate, new object[] {
                        fieldID,
                        title,
                        description,
                        address,
                        latitude,
                        longitude,
                        numberOfFields,
                        parkingLot,
                        phoneNumber,
                        isOpen,
                        status}, this.onEndUpdateFieldDelegate, this.onUpdateFieldCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginUpdateMessengerID(string messengerPresenceID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateMessengerID(messengerPresenceID, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndUpdateMessengerID(System.IAsyncResult result) {
            base.Channel.EndUpdateMessengerID(result);
        }
        
        private System.IAsyncResult OnBeginUpdateMessengerID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string messengerPresenceID = ((string)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginUpdateMessengerID(messengerPresenceID, callback, asyncState);
        }
        
        private object[] OnEndUpdateMessengerID(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndUpdateMessengerID(result);
            return null;
        }
        
        private void OnUpdateMessengerIDCompleted(object state) {
            if ((this.UpdateMessengerIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateMessengerIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateMessengerIDAsync(string messengerPresenceID) {
            this.UpdateMessengerIDAsync(messengerPresenceID, null);
        }
        
        public void UpdateMessengerIDAsync(string messengerPresenceID, object userState) {
            if ((this.onBeginUpdateMessengerIDDelegate == null)) {
                this.onBeginUpdateMessengerIDDelegate = new BeginOperationDelegate(this.OnBeginUpdateMessengerID);
            }
            if ((this.onEndUpdateMessengerIDDelegate == null)) {
                this.onEndUpdateMessengerIDDelegate = new EndOperationDelegate(this.OnEndUpdateMessengerID);
            }
            if ((this.onUpdateMessengerIDCompletedDelegate == null)) {
                this.onUpdateMessengerIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateMessengerIDCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateMessengerIDDelegate, new object[] {
                        messengerPresenceID}, this.onEndUpdateMessengerIDDelegate, this.onUpdateMessengerIDCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginDeleteLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteLeague(leagueID, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndDeleteLeague(System.IAsyncResult result) {
            base.Channel.EndDeleteLeague(result);
        }
        
        private System.IAsyncResult OnBeginDeleteLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int leagueID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginDeleteLeague(leagueID, callback, asyncState);
        }
        
        private object[] OnEndDeleteLeague(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndDeleteLeague(result);
            return null;
        }
        
        private void OnDeleteLeagueCompleted(object state) {
            if ((this.DeleteLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteLeagueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteLeagueAsync(int leagueID) {
            this.DeleteLeagueAsync(leagueID, null);
        }
        
        public void DeleteLeagueAsync(int leagueID, object userState) {
            if ((this.onBeginDeleteLeagueDelegate == null)) {
                this.onBeginDeleteLeagueDelegate = new BeginOperationDelegate(this.OnBeginDeleteLeague);
            }
            if ((this.onEndDeleteLeagueDelegate == null)) {
                this.onEndDeleteLeagueDelegate = new EndOperationDelegate(this.OnEndDeleteLeague);
            }
            if ((this.onDeleteLeagueCompletedDelegate == null)) {
                this.onDeleteLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteLeagueDelegate, new object[] {
                        leagueID}, this.onEndDeleteLeagueDelegate, this.onDeleteLeagueCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginDeleteField(int fieldID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteField(fieldID, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndDeleteField(System.IAsyncResult result) {
            base.Channel.EndDeleteField(result);
        }
        
        private System.IAsyncResult OnBeginDeleteField(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int fieldID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginDeleteField(fieldID, callback, asyncState);
        }
        
        private object[] OnEndDeleteField(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndDeleteField(result);
            return null;
        }
        
        private void OnDeleteFieldCompleted(object state) {
            if ((this.DeleteFieldCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFieldCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFieldAsync(int fieldID) {
            this.DeleteFieldAsync(fieldID, null);
        }
        
        public void DeleteFieldAsync(int fieldID, object userState) {
            if ((this.onBeginDeleteFieldDelegate == null)) {
                this.onBeginDeleteFieldDelegate = new BeginOperationDelegate(this.OnBeginDeleteField);
            }
            if ((this.onEndDeleteFieldDelegate == null)) {
                this.onEndDeleteFieldDelegate = new EndOperationDelegate(this.OnEndDeleteField);
            }
            if ((this.onDeleteFieldCompletedDelegate == null)) {
                this.onDeleteFieldCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFieldCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFieldDelegate, new object[] {
                        fieldID}, this.onEndDeleteFieldDelegate, this.onDeleteFieldCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginRemoveLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveLeague(leagueID, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndRemoveLeague(System.IAsyncResult result) {
            base.Channel.EndRemoveLeague(result);
        }
        
        private System.IAsyncResult OnBeginRemoveLeague(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int leagueID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginRemoveLeague(leagueID, callback, asyncState);
        }
        
        private object[] OnEndRemoveLeague(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndRemoveLeague(result);
            return null;
        }
        
        private void OnRemoveLeagueCompleted(object state) {
            if ((this.RemoveLeagueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveLeagueCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveLeagueAsync(int leagueID) {
            this.RemoveLeagueAsync(leagueID, null);
        }
        
        public void RemoveLeagueAsync(int leagueID, object userState) {
            if ((this.onBeginRemoveLeagueDelegate == null)) {
                this.onBeginRemoveLeagueDelegate = new BeginOperationDelegate(this.OnBeginRemoveLeague);
            }
            if ((this.onEndRemoveLeagueDelegate == null)) {
                this.onEndRemoveLeagueDelegate = new EndOperationDelegate(this.OnEndRemoveLeague);
            }
            if ((this.onRemoveLeagueCompletedDelegate == null)) {
                this.onRemoveLeagueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveLeagueCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveLeagueDelegate, new object[] {
                        leagueID}, this.onEndRemoveLeagueDelegate, this.onRemoveLeagueCompletedDelegate, userState);
        }
        
        System.IAsyncResult WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.BeginRemoveField(int fieldID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveField(fieldID, callback, asyncState);
        }
        
        void WLQuickApps.FieldManager.Silverlight.SiteService.SiteService.EndRemoveField(System.IAsyncResult result) {
            base.Channel.EndRemoveField(result);
        }
        
        private System.IAsyncResult OnBeginRemoveField(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int fieldID = ((int)(inValues[0]));
            return ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).BeginRemoveField(fieldID, callback, asyncState);
        }
        
        private object[] OnEndRemoveField(System.IAsyncResult result) {
            ((WLQuickApps.FieldManager.Silverlight.SiteService.SiteService)(this)).EndRemoveField(result);
            return null;
        }
        
        private void OnRemoveFieldCompleted(object state) {
            if ((this.RemoveFieldCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveFieldCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveFieldAsync(int fieldID) {
            this.RemoveFieldAsync(fieldID, null);
        }
        
        public void RemoveFieldAsync(int fieldID, object userState) {
            if ((this.onBeginRemoveFieldDelegate == null)) {
                this.onBeginRemoveFieldDelegate = new BeginOperationDelegate(this.OnBeginRemoveField);
            }
            if ((this.onEndRemoveFieldDelegate == null)) {
                this.onEndRemoveFieldDelegate = new EndOperationDelegate(this.OnEndRemoveField);
            }
            if ((this.onRemoveFieldCompletedDelegate == null)) {
                this.onRemoveFieldCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveFieldCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveFieldDelegate, new object[] {
                        fieldID}, this.onEndRemoveFieldDelegate, this.onRemoveFieldCompletedDelegate, userState);
        }
        
        protected override WLQuickApps.FieldManager.Silverlight.SiteService.SiteService CreateChannel() {
            return new SiteServiceClientChannel(this);
        }
        
        private class SiteServiceClientChannel : ChannelBase<WLQuickApps.FieldManager.Silverlight.SiteService.SiteService>, WLQuickApps.FieldManager.Silverlight.SiteService.SiteService {
            
            public SiteServiceClientChannel(System.ServiceModel.ClientBase<WLQuickApps.FieldManager.Silverlight.SiteService.SiteService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateLeague(string title, string description, string type, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = title;
                _args[1] = description;
                _args[2] = type;
                System.IAsyncResult _result = base.BeginInvoke("CreateLeague", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem EndCreateLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem)(base.EndInvoke("CreateLeague", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreateField(string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, string status, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[9];
                _args[0] = title;
                _args[1] = description;
                _args[2] = address;
                _args[3] = latitude;
                _args[4] = longitude;
                _args[5] = numberOfFields;
                _args[6] = parkingLot;
                _args[7] = phoneNumber;
                _args[8] = status;
                System.IAsyncResult _result = base.BeginInvoke("CreateField", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem EndCreateField(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem)(base.EndInvoke("CreateField", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = leagueID;
                System.IAsyncResult _result = base.BeginInvoke("GetLeague", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem EndGetLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem)(base.EndInvoke("GetLeague", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetAllLeagues(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetAllLeagues", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] EndGetAllLeagues(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[])(base.EndInvoke("GetAllLeagues", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLeagues(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetLeagues", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] EndGetLeagues(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[] _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.LeagueItem[])(base.EndInvoke("GetLeagues", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetField(int fieldID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fieldID;
                System.IAsyncResult _result = base.BeginInvoke("GetField", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem EndGetField(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem)(base.EndInvoke("GetField", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetWeather(double latitude, double longitude, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = latitude;
                _args[1] = longitude;
                System.IAsyncResult _result = base.BeginInvoke("GetWeather", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.Weather[] EndGetWeather(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.Weather[] _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.Weather[])(base.EndInvoke("GetWeather", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginChangeFieldStatus(int fieldID, bool isOpen, string status, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = fieldID;
                _args[1] = isOpen;
                _args[2] = status;
                System.IAsyncResult _result = base.BeginInvoke("ChangeFieldStatus", _args, callback, asyncState);
                return _result;
            }
            
            public void EndChangeFieldStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("ChangeFieldStatus", _args, result);
            }
            
            public System.IAsyncResult BeginGetMyFields(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetMyFields", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] EndGetMyFields(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[])(base.EndInvoke("GetMyFields", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFieldsForUser(int startRowIndex, int maximumRows, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = startRowIndex;
                _args[1] = maximumRows;
                System.IAsyncResult _result = base.BeginInvoke("GetFieldsForUser", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] EndGetFieldsForUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[])(base.EndInvoke("GetFieldsForUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFieldsForUserCount(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetFieldsForUserCount", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetFieldsForUserCount(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetFieldsForUserCount", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFieldsInRange(double nLatitude, double sLatitude, double eLongitude, double wLongitude, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = nLatitude;
                _args[1] = sLatitude;
                _args[2] = eLongitude;
                _args[3] = wLongitude;
                System.IAsyncResult _result = base.BeginInvoke("GetFieldsInRange", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] EndGetFieldsInRange(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[])(base.EndInvoke("GetFieldsInRange", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFieldsForLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = leagueID;
                System.IAsyncResult _result = base.BeginInvoke("GetFieldsForLeague", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] EndGetFieldsForLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[] _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.FieldItem[])(base.EndInvoke("GetFieldsForLeague", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUsersForLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = leagueID;
                System.IAsyncResult _result = base.BeginInvoke("GetUsersForLeague", _args, callback, asyncState);
                return _result;
            }
            
            public WLQuickApps.FieldManager.Silverlight.SiteService.UserItem[] EndGetUsersForLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                WLQuickApps.FieldManager.Silverlight.SiteService.UserItem[] _result = ((WLQuickApps.FieldManager.Silverlight.SiteService.UserItem[])(base.EndInvoke("GetUsersForLeague", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserNameByEmail(string email, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = email;
                System.IAsyncResult _result = base.BeginInvoke("GetUserNameByEmail", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserNameByEmail(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUserNameByEmail", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDisplayName(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDisplayName", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetDisplayName(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetDisplayName", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddToMyFields(int fieldID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fieldID;
                System.IAsyncResult _result = base.BeginInvoke("AddToMyFields", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddToMyFields(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddToMyFields", _args, result);
            }
            
            public System.IAsyncResult BeginAddToMyLeagues(int leagueID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = leagueID;
                System.IAsyncResult _result = base.BeginInvoke("AddToMyLeagues", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddToMyLeagues(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddToMyLeagues", _args, result);
            }
            
            public System.IAsyncResult BeginAddFieldAdmin(int fieldID, string userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fieldID;
                _args[1] = userID;
                System.IAsyncResult _result = base.BeginInvoke("AddFieldAdmin", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddFieldAdmin(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddFieldAdmin", _args, result);
            }
            
            public System.IAsyncResult BeginAddFieldToLeague(int fieldID, int leagueID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = fieldID;
                _args[1] = leagueID;
                System.IAsyncResult _result = base.BeginInvoke("AddFieldToLeague", _args, callback, asyncState);
                return _result;
            }
            
            public void EndAddFieldToLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("AddFieldToLeague", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateLeague(int leagueID, string title, string description, string type, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = leagueID;
                _args[1] = title;
                _args[2] = description;
                _args[3] = type;
                System.IAsyncResult _result = base.BeginInvoke("UpdateLeague", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateLeague", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateField(int fieldID, string title, string description, string address, double latitude, double longitude, int numberOfFields, string parkingLot, string phoneNumber, bool isOpen, string status, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[11];
                _args[0] = fieldID;
                _args[1] = title;
                _args[2] = description;
                _args[3] = address;
                _args[4] = latitude;
                _args[5] = longitude;
                _args[6] = numberOfFields;
                _args[7] = parkingLot;
                _args[8] = phoneNumber;
                _args[9] = isOpen;
                _args[10] = status;
                System.IAsyncResult _result = base.BeginInvoke("UpdateField", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateField(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateField", _args, result);
            }
            
            public System.IAsyncResult BeginUpdateMessengerID(string messengerPresenceID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = messengerPresenceID;
                System.IAsyncResult _result = base.BeginInvoke("UpdateMessengerID", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateMessengerID(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateMessengerID", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = leagueID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteLeague", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteLeague", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteField(int fieldID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fieldID;
                System.IAsyncResult _result = base.BeginInvoke("DeleteField", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteField(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteField", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveLeague(int leagueID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = leagueID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveLeague", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveLeague(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveLeague", _args, result);
            }
            
            public System.IAsyncResult BeginRemoveField(int fieldID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fieldID;
                System.IAsyncResult _result = base.BeginInvoke("RemoveField", _args, callback, asyncState);
                return _result;
            }
            
            public void EndRemoveField(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("RemoveField", _args, result);
            }
        }
    }
}
