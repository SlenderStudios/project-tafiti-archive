#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WLQuickApps.ContosoBank
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="ContosoBank")]
	public partial class ContosoBankDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertForumSubject(ForumSubject instance);
    partial void UpdateForumSubject(ForumSubject instance);
    partial void DeleteForumSubject(ForumSubject instance);
    partial void InsertForumReply(ForumReply instance);
    partial void UpdateForumReply(ForumReply instance);
    partial void DeleteForumReply(ForumReply instance);
    partial void InsertVideo(Video instance);
    partial void UpdateVideo(Video instance);
    partial void DeleteVideo(Video instance);
    partial void InsertUserProfile(UserProfile instance);
    partial void UpdateUserProfile(UserProfile instance);
    partial void DeleteUserProfile(UserProfile instance);
    partial void InsertBranch(Branch instance);
    partial void UpdateBranch(Branch instance);
    partial void DeleteBranch(Branch instance);
    #endregion
		
		public ContosoBankDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ContosoBankConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public ContosoBankDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContosoBankDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContosoBankDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public ContosoBankDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ForumSubject> ForumSubjects
		{
			get
			{
				return this.GetTable<ForumSubject>();
			}
		}
		
		public System.Data.Linq.Table<ForumReply> ForumReplies
		{
			get
			{
				return this.GetTable<ForumReply>();
			}
		}
		
		public System.Data.Linq.Table<Video> Videos
		{
			get
			{
				return this.GetTable<Video>();
			}
		}
		
		public System.Data.Linq.Table<UserProfile> UserProfiles
		{
			get
			{
				return this.GetTable<UserProfile>();
			}
		}
		
		public System.Data.Linq.Table<Branch> Branches
		{
			get
			{
				return this.GetTable<Branch>();
			}
		}
	}
	
	[Table(Name="dbo.ForumSubject")]
	public partial class ForumSubject : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForumSubjectID;
		
		private string _Subject;
		
		private int _SubjectType;
		
		private int _NumViews;
		
		private System.Guid _UserProfileID;
		
		private System.DateTime _PostDate;
		
		private bool _IsStickyPost;
		
		private EntitySet<ForumReply> _ForumReplies;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumSubjectIDChanging(int value);
    partial void OnForumSubjectIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnSubjectTypeChanging(int value);
    partial void OnSubjectTypeChanged();
    partial void OnNumViewsChanging(int value);
    partial void OnNumViewsChanged();
    partial void OnUserProfileIDChanging(System.Guid value);
    partial void OnUserProfileIDChanged();
    partial void OnPostDateChanging(System.DateTime value);
    partial void OnPostDateChanged();
    partial void OnIsStickyPostChanging(bool value);
    partial void OnIsStickyPostChanged();
    #endregion
		
		public ForumSubject()
		{
			this._ForumReplies = new EntitySet<ForumReply>(new Action<ForumReply>(this.attach_ForumReplies), new Action<ForumReply>(this.detach_ForumReplies));
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[Column(Storage="_ForumSubjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ForumSubjectID
		{
			get
			{
				return this._ForumSubjectID;
			}
			set
			{
				if ((this._ForumSubjectID != value))
				{
					this.OnForumSubjectIDChanging(value);
					this.SendPropertyChanging();
					this._ForumSubjectID = value;
					this.SendPropertyChanged("ForumSubjectID");
					this.OnForumSubjectIDChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_SubjectType", DbType="Int NOT NULL")]
		public int SubjectType
		{
			get
			{
				return this._SubjectType;
			}
			set
			{
				if ((this._SubjectType != value))
				{
					this.OnSubjectTypeChanging(value);
					this.SendPropertyChanging();
					this._SubjectType = value;
					this.SendPropertyChanged("SubjectType");
					this.OnSubjectTypeChanged();
				}
			}
		}
		
		[Column(Storage="_NumViews", DbType="Int NOT NULL")]
		public int NumViews
		{
			get
			{
				return this._NumViews;
			}
			set
			{
				if ((this._NumViews != value))
				{
					this.OnNumViewsChanging(value);
					this.SendPropertyChanging();
					this._NumViews = value;
					this.SendPropertyChanged("NumViews");
					this.OnNumViewsChanged();
				}
			}
		}
		
		[Column(Storage="_UserProfileID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserProfileID
		{
			get
			{
				return this._UserProfileID;
			}
			set
			{
				if ((this._UserProfileID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserProfileIDChanging(value);
					this.SendPropertyChanging();
					this._UserProfileID = value;
					this.SendPropertyChanged("UserProfileID");
					this.OnUserProfileIDChanged();
				}
			}
		}
		
		[Column(Storage="_PostDate", DbType="DateTime NOT NULL")]
		public System.DateTime PostDate
		{
			get
			{
				return this._PostDate;
			}
			set
			{
				if ((this._PostDate != value))
				{
					this.OnPostDateChanging(value);
					this.SendPropertyChanging();
					this._PostDate = value;
					this.SendPropertyChanged("PostDate");
					this.OnPostDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsStickyPost", DbType="Bit NOT NULL")]
		public bool IsStickyPost
		{
			get
			{
				return this._IsStickyPost;
			}
			set
			{
				if ((this._IsStickyPost != value))
				{
					this.OnIsStickyPostChanging(value);
					this.SendPropertyChanging();
					this._IsStickyPost = value;
					this.SendPropertyChanged("IsStickyPost");
					this.OnIsStickyPostChanged();
				}
			}
		}
		
		[Association(Name="ForumSubject_ForumReply", Storage="_ForumReplies", OtherKey="ForumSubject")]
		public EntitySet<ForumReply> ForumReplies
		{
			get
			{
				return this._ForumReplies;
			}
			set
			{
				this._ForumReplies.Assign(value);
			}
		}
		
		[Association(Name="UserProfile_ForumSubject", Storage="_UserProfile", ThisKey="UserProfileID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ForumSubjects.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ForumSubjects.Add(this);
						this._UserProfileID = value.UserProfileID;
					}
					else
					{
						this._UserProfileID = default(System.Guid);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumReplies(ForumReply entity)
		{
			this.SendPropertyChanging();
			entity.ForumSubject1 = this;
		}
		
		private void detach_ForumReplies(ForumReply entity)
		{
			this.SendPropertyChanging();
			entity.ForumSubject1 = null;
		}
	}
	
	[Table(Name="dbo.ForumReply")]
	public partial class ForumReply : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ForumReplyID;
		
		private int _ForumSubject;
		
		private string _ReplyText;
		
		private string _Tags;
		
		private System.Guid _UserProfileID;
		
		private System.DateTime _ReplyDate;
		
		private EntityRef<ForumSubject> _ForumSubject1;
		
		private EntityRef<UserProfile> _UserProfile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnForumReplyIDChanging(int value);
    partial void OnForumReplyIDChanged();
    partial void OnForumSubjectChanging(int value);
    partial void OnForumSubjectChanged();
    partial void OnReplyTextChanging(string value);
    partial void OnReplyTextChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnUserProfileIDChanging(System.Guid value);
    partial void OnUserProfileIDChanged();
    partial void OnReplyDateChanging(System.DateTime value);
    partial void OnReplyDateChanged();
    #endregion
		
		public ForumReply()
		{
			this._ForumSubject1 = default(EntityRef<ForumSubject>);
			this._UserProfile = default(EntityRef<UserProfile>);
			OnCreated();
		}
		
		[Column(Storage="_ForumReplyID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ForumReplyID
		{
			get
			{
				return this._ForumReplyID;
			}
			set
			{
				if ((this._ForumReplyID != value))
				{
					this.OnForumReplyIDChanging(value);
					this.SendPropertyChanging();
					this._ForumReplyID = value;
					this.SendPropertyChanged("ForumReplyID");
					this.OnForumReplyIDChanged();
				}
			}
		}
		
		[Column(Storage="_ForumSubject", DbType="Int NOT NULL")]
		public int ForumSubject
		{
			get
			{
				return this._ForumSubject;
			}
			set
			{
				if ((this._ForumSubject != value))
				{
					if (this._ForumSubject1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnForumSubjectChanging(value);
					this.SendPropertyChanging();
					this._ForumSubject = value;
					this.SendPropertyChanged("ForumSubject");
					this.OnForumSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_ReplyText", DbType="NVarChar(1000) NOT NULL", CanBeNull=false)]
		public string ReplyText
		{
			get
			{
				return this._ReplyText;
			}
			set
			{
				if ((this._ReplyText != value))
				{
					this.OnReplyTextChanging(value);
					this.SendPropertyChanging();
					this._ReplyText = value;
					this.SendPropertyChanged("ReplyText");
					this.OnReplyTextChanged();
				}
			}
		}
		
		[Column(Storage="_Tags", DbType="NVarChar(200)")]
		public string Tags
		{
			get
			{
				return this._Tags;
			}
			set
			{
				if ((this._Tags != value))
				{
					this.OnTagsChanging(value);
					this.SendPropertyChanging();
					this._Tags = value;
					this.SendPropertyChanged("Tags");
					this.OnTagsChanged();
				}
			}
		}
		
		[Column(Storage="_UserProfileID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid UserProfileID
		{
			get
			{
				return this._UserProfileID;
			}
			set
			{
				if ((this._UserProfileID != value))
				{
					if (this._UserProfile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserProfileIDChanging(value);
					this.SendPropertyChanging();
					this._UserProfileID = value;
					this.SendPropertyChanged("UserProfileID");
					this.OnUserProfileIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReplyDate", DbType="DateTime NOT NULL")]
		public System.DateTime ReplyDate
		{
			get
			{
				return this._ReplyDate;
			}
			set
			{
				if ((this._ReplyDate != value))
				{
					this.OnReplyDateChanging(value);
					this.SendPropertyChanging();
					this._ReplyDate = value;
					this.SendPropertyChanged("ReplyDate");
					this.OnReplyDateChanged();
				}
			}
		}
		
		[Association(Name="ForumSubject_ForumReply", Storage="_ForumSubject1", ThisKey="ForumSubject", IsForeignKey=true)]
		public ForumSubject ForumSubject1
		{
			get
			{
				return this._ForumSubject1.Entity;
			}
			set
			{
				ForumSubject previousValue = this._ForumSubject1.Entity;
				if (((previousValue != value) 
							|| (this._ForumSubject1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ForumSubject1.Entity = null;
						previousValue.ForumReplies.Remove(this);
					}
					this._ForumSubject1.Entity = value;
					if ((value != null))
					{
						value.ForumReplies.Add(this);
						this._ForumSubject = value.ForumSubjectID;
					}
					else
					{
						this._ForumSubject = default(int);
					}
					this.SendPropertyChanged("ForumSubject1");
				}
			}
		}
		
		[Association(Name="UserProfile_ForumReply", Storage="_UserProfile", ThisKey="UserProfileID", IsForeignKey=true)]
		public UserProfile UserProfile
		{
			get
			{
				return this._UserProfile.Entity;
			}
			set
			{
				UserProfile previousValue = this._UserProfile.Entity;
				if (((previousValue != value) 
							|| (this._UserProfile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserProfile.Entity = null;
						previousValue.ForumReplies.Remove(this);
					}
					this._UserProfile.Entity = value;
					if ((value != null))
					{
						value.ForumReplies.Add(this);
						this._UserProfileID = value.UserProfileID;
					}
					else
					{
						this._UserProfileID = default(System.Guid);
					}
					this.SendPropertyChanged("UserProfile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Videos")]
	public partial class Video : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VideoId;
		
		private string _VideoTitle;
		
		private string _VideoURL;
		
		private int _NumViews;
		
		private int _Rating;
		
		private string _FrameImage;
		
		private System.DateTime _UploadDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVideoIdChanging(int value);
    partial void OnVideoIdChanged();
    partial void OnVideoTitleChanging(string value);
    partial void OnVideoTitleChanged();
    partial void OnVideoURLChanging(string value);
    partial void OnVideoURLChanged();
    partial void OnNumViewsChanging(int value);
    partial void OnNumViewsChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnFrameImageChanging(string value);
    partial void OnFrameImageChanged();
    partial void OnUploadDateChanging(System.DateTime value);
    partial void OnUploadDateChanged();
    #endregion
		
		public Video()
		{
			OnCreated();
		}
		
		[Column(Storage="_VideoId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VideoId
		{
			get
			{
				return this._VideoId;
			}
			set
			{
				if ((this._VideoId != value))
				{
					this.OnVideoIdChanging(value);
					this.SendPropertyChanging();
					this._VideoId = value;
					this.SendPropertyChanged("VideoId");
					this.OnVideoIdChanged();
				}
			}
		}
		
		[Column(Storage="_VideoTitle", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string VideoTitle
		{
			get
			{
				return this._VideoTitle;
			}
			set
			{
				if ((this._VideoTitle != value))
				{
					this.OnVideoTitleChanging(value);
					this.SendPropertyChanging();
					this._VideoTitle = value;
					this.SendPropertyChanged("VideoTitle");
					this.OnVideoTitleChanged();
				}
			}
		}
		
		[Column(Storage="_VideoURL", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string VideoURL
		{
			get
			{
				return this._VideoURL;
			}
			set
			{
				if ((this._VideoURL != value))
				{
					this.OnVideoURLChanging(value);
					this.SendPropertyChanging();
					this._VideoURL = value;
					this.SendPropertyChanged("VideoURL");
					this.OnVideoURLChanged();
				}
			}
		}
		
		[Column(Storage="_NumViews", DbType="Int NOT NULL")]
		public int NumViews
		{
			get
			{
				return this._NumViews;
			}
			set
			{
				if ((this._NumViews != value))
				{
					this.OnNumViewsChanging(value);
					this.SendPropertyChanging();
					this._NumViews = value;
					this.SendPropertyChanged("NumViews");
					this.OnNumViewsChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Column(Storage="_FrameImage", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string FrameImage
		{
			get
			{
				return this._FrameImage;
			}
			set
			{
				if ((this._FrameImage != value))
				{
					this.OnFrameImageChanging(value);
					this.SendPropertyChanging();
					this._FrameImage = value;
					this.SendPropertyChanged("FrameImage");
					this.OnFrameImageChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime NOT NULL")]
		public System.DateTime UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.UserProfile")]
	public partial class UserProfile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DisplayName;
		
		private string _Avatar;
		
		private string _Postcode;
		
		private string _Country;
		
		private double _Longitude;
		
		private double _Latitude;
		
		private string _LiveID;
		
		private int _Rating;
		
		private System.Guid _UserProfileID;
		
		private EntitySet<ForumSubject> _ForumSubjects;
		
		private EntitySet<ForumReply> _ForumReplies;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDisplayNameChanging(string value);
    partial void OnDisplayNameChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    partial void OnPostcodeChanging(string value);
    partial void OnPostcodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLiveIDChanging(string value);
    partial void OnLiveIDChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnUserProfileIDChanging(System.Guid value);
    partial void OnUserProfileIDChanged();
    #endregion
		
		public UserProfile()
		{
			this._ForumSubjects = new EntitySet<ForumSubject>(new Action<ForumSubject>(this.attach_ForumSubjects), new Action<ForumSubject>(this.detach_ForumSubjects));
			this._ForumReplies = new EntitySet<ForumReply>(new Action<ForumReply>(this.attach_ForumReplies), new Action<ForumReply>(this.detach_ForumReplies));
			OnCreated();
		}
		
		[Column(Storage="_DisplayName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string DisplayName
		{
			get
			{
				return this._DisplayName;
			}
			set
			{
				if ((this._DisplayName != value))
				{
					this.OnDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._DisplayName = value;
					this.SendPropertyChanged("DisplayName");
					this.OnDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_Avatar", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[Column(Storage="_Postcode", DbType="NVarChar(6) NOT NULL", CanBeNull=false)]
		public string Postcode
		{
			get
			{
				return this._Postcode;
			}
			set
			{
				if ((this._Postcode != value))
				{
					this.OnPostcodeChanging(value);
					this.SendPropertyChanging();
					this._Postcode = value;
					this.SendPropertyChanged("Postcode");
					this.OnPostcodeChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_LiveID", DbType="NVarChar(256)")]
		public string LiveID
		{
			get
			{
				return this._LiveID;
			}
			set
			{
				if ((this._LiveID != value))
				{
					this.OnLiveIDChanging(value);
					this.SendPropertyChanging();
					this._LiveID = value;
					this.SendPropertyChanged("LiveID");
					this.OnLiveIDChanged();
				}
			}
		}
		
		[Column(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[Column(Storage="_UserProfileID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserProfileID
		{
			get
			{
				return this._UserProfileID;
			}
			set
			{
				if ((this._UserProfileID != value))
				{
					this.OnUserProfileIDChanging(value);
					this.SendPropertyChanging();
					this._UserProfileID = value;
					this.SendPropertyChanged("UserProfileID");
					this.OnUserProfileIDChanged();
				}
			}
		}
		
		[Association(Name="UserProfile_ForumSubject", Storage="_ForumSubjects", OtherKey="UserProfileID")]
		public EntitySet<ForumSubject> ForumSubjects
		{
			get
			{
				return this._ForumSubjects;
			}
			set
			{
				this._ForumSubjects.Assign(value);
			}
		}
		
		[Association(Name="UserProfile_ForumReply", Storage="_ForumReplies", OtherKey="UserProfileID")]
		public EntitySet<ForumReply> ForumReplies
		{
			get
			{
				return this._ForumReplies;
			}
			set
			{
				this._ForumReplies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ForumSubjects(ForumSubject entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ForumSubjects(ForumSubject entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
		
		private void attach_ForumReplies(ForumReply entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = this;
		}
		
		private void detach_ForumReplies(ForumReply entity)
		{
			this.SendPropertyChanging();
			entity.UserProfile = null;
		}
	}
	
	[Table(Name="dbo.Branch")]
	public partial class Branch : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BranchID;
		
		private double _Latitude;
		
		private double _Longitude;
		
		private string _Address;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBranchIDChanging(int value);
    partial void OnBranchIDChanged();
    partial void OnLatitudeChanging(double value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(double value);
    partial void OnLongitudeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Branch()
		{
			OnCreated();
		}
		
		[Column(Storage="_BranchID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BranchID
		{
			get
			{
				return this._BranchID;
			}
			set
			{
				if ((this._BranchID != value))
				{
					this.OnBranchIDChanging(value);
					this.SendPropertyChanging();
					this._BranchID = value;
					this.SendPropertyChanged("BranchID");
					this.OnBranchIDChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Float NOT NULL")]
		public double Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Float NOT NULL")]
		public double Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Address", DbType="NVarChar(MAX)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
